#!/usr/bin/env python3
# ============================================================================
# v5.0 - Range Trading Scanner
# ‚Ä¢ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ "–ø–∏–ª—ã" (–Ω–∏–∑–∫–∏–π ADX + —à–∏—Ä–æ–∫–∏–π –∫–∞–Ω–∞–ª –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞).
# ‚Ä¢ –°–∏–≥–Ω–∞–ª –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –∫–∞—Å–∞–Ω–∏–∏ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB –∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ RSI.
# ============================================================================

import os
import asyncio
import json
import logging
from datetime import datetime
import pandas as pd
import ccxt.async_support as ccxt
import pandas_ta as ta # –ò—Å–ø–æ–ª—å–∑—É–µ–º pandas_ta –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# === ENV / Logging ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_IDS = {int(cid) for cid in os.getenv("CHAT_IDS", "0").split(",") if cid}
# ---> –ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–†: –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
COIN_LIST_STR = os.getenv("COIN_LIST", "BTC/USDT,ETH/USDT,SOL/USDT")
COIN_LIST = [coin.strip().upper() for coin in COIN_LIST_STR.split(",")]

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("bot")

# === STATE MANAGEMENT ===
# –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, –∫–æ–≥–¥–∞ –¥–ª—è –º–æ–Ω–µ—Ç—ã –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
last_alert_times = {}

# === EXCHANGE (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö) ===
exchange = ccxt.mexc()

# === STRATEGY PARAMS ===
TIMEFRAME = '5m'
SCAN_INTERVAL_SECONDS = 60 * 5 # –ö–∞–∫ —á–∞—Å—Ç–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã (—Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
ADX_LEN = 14
ADX_THRESHOLD = 20 # –ò—â–µ–º ADX –ù–ò–ñ–ï —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
BBANDS_LEN = 20
BBANDS_STD = 2.0
MIN_BB_WIDTH_PCT = 3.0 # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ –≤ %

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
RSI_LEN = 14
RSI_OVERSOLD = 30 # –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ RSI
ATR_LEN_FOR_SL = 14
SL_ATR_MUL = 0.5 # –ú–Ω–æ–∂–∏—Ç–µ–ª—å ATR –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞

# === MAIN SCANNER LOOP ===
async def scanner_loop(app):
    while True:
        log.info(f"Starting new scan for {len(COIN_LIST)} coins...")
        for pair in COIN_LIST:
            try:
                # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                ohlcv = await exchange.fetch_ohlcv(pair, timeframe=TIMEFRAME, limit=100)
                df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                if df.empty: continue

                # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å –ø–æ–º–æ—â—å—é pandas_ta
                df.ta.adx(length=ADX_LEN, append=True)
                df.ta.bbands(length=BBANDS_LEN, std=BBANDS_STD, append=True)
                df.ta.rsi(length=RSI_LEN, append=True)
                df.ta.atr(length=ATR_LEN_FOR_SL, append=True)
                df.dropna(inplace=True) # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –µ—â–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∏—Å—å

                last = df.iloc[-1]
                
                # --- –õ–æ–≥–∏–∫–∞ –°–∫–∞–Ω–µ—Ä–∞ ---
                # –§–∏–ª—å—Ç—Ä 1: –†—ã–Ω–æ–∫ –≤–æ —Ñ–ª—ç—Ç–µ? (ADX < –ø–æ—Ä–æ–≥–∞)
                adx_value = last[f'ADX_{ADX_LEN}']
                is_ranging = adx_value < ADX_THRESHOLD

                # –§–∏–ª—å—Ç—Ä 2: –î–∏–∞–ø–∞–∑–æ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∏—Ä–æ–∫–∏–π?
                bb_upper = last[f'BBU_{BBANDS_LEN}_{BBANDS_STD}']
                bb_lower = last[f'BBL_{BBANDS_LEN}_{BBANDS_STD}']
                bb_width_pct = ((bb_upper - bb_lower) / bb_lower) * 100
                is_wide_enough = bb_width_pct > MIN_BB_WIDTH_PCT

                # –ï—Å–ª–∏ –º–æ–Ω–µ—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π
                if not (is_ranging and is_wide_enough):
                    continue

                # --- –õ–æ–≥–∏–∫–∞ –ê–ª–µ—Ä—Ç–µ—Ä–∞ (–µ—Å–ª–∏ –º–æ–Ω–µ—Ç–∞ –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä—ã) ---
                rsi_value = last[f'RSI_{RSI_LEN}']
                
                # –£—Å–ª–æ–≤–∏–µ –≤—Ö–æ–¥–∞: —Ü–µ–Ω–∞ –∫–∞—Å–∞–µ—Ç—Å—è –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã + RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω
                if last['close'] <= bb_lower and rsi_value < RSI_OVERSOLD:
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –ø–æ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –º–æ–Ω–µ—Ç–µ
                    now = datetime.now().timestamp()
                    if (now - last_alert_times.get(pair, 0)) < 3600: # –ü–∞—É–∑–∞ 1 —á–∞—Å –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã
                        continue

                    # –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–¥–µ–ª–∫–∏
                    entry_price = last['close']
                    take_profit = last[f'BBM_{BBANDS_LEN}_{BBANDS_STD}'] # –°—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
                    stop_loss = bb_lower - (last[f'ATRr_{ATR_LEN_FOR_SL}'] * SL_ATR_MUL)

                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    message = (
                        f"üîî **–°–ò–ì–ù–ê–õ: LONG (Range Trade)**\n\n"
                        f"**–ú–æ–Ω–µ—Ç–∞:** `{pair}`\n"
                        f"**–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:** `{entry_price:.4f}`\n\n"
                        f"--- **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏** ---\n"
                        f"*–í—Ö–æ–¥:* `~{entry_price:.4f}`\n"
                        f"*Take Profit:* `{take_profit:.4f}` (–°—Ä–µ–¥–Ω—è—è BB)\n"
                        f"*Stop Loss:* `{stop_loss:.4f}`\n\n"
                        f"--- **–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ** ---\n"
                        f"* –†—ã–Ω–æ–∫ –≤–æ —Ñ–ª—ç—Ç–µ (ADX: {adx_value:.1f} < {ADX_THRESHOLD})\n"
                        f"* –®–∏—Ä–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {bb_width_pct:.1f}% (> {MIN_BB_WIDTH_PCT}%)\n"
                        f"* –¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB + RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω ({rsi_value:.1f})"
                    )
                    await broadcast_message(app, message)
                    last_alert_times[pair] = now # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
            
            except Exception as e:
                log.error(f"Error processing pair {pair}: {e}")

        await asyncio.sleep(SCAN_INTERVAL_SECONDS)

# === COMMANDS and RUN ===
async def broadcast_message(app, text):
    for chat_id in app.chat_ids:
        # MarkdownV2 —Ç—Ä–µ–±—É–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
        safe_text = text.replace('.', r'\.').replace('-', r'\-').replace('(', r'\(').replace(')', r'\)').replace('>', r'\>').replace('+', r'\+').replace('=', r'\=').replace('*', r'\*').replace('_', r'\_').replace('`', r'\`')
        await app.bot.send_message(chat_id=chat_id, text=safe_text, parse_mode="MarkdownV2")

async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ chat_ids —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if not hasattr(ctx.application, 'chat_ids'):
        ctx.application.chat_ids = set()
    ctx.application.chat_ids.add(chat_id)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
    if "scanner_task" not in ctx.application.chat_data or ctx.application.chat_data["scanner_task"].done():
        await update.message.reply_text("‚úÖ –°–∫–∞–Ω–µ—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ '–ø–∏–ª–µ' –∑–∞–ø—É—â–µ–Ω.")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        ctx.application.chat_data["scanner_task"] = asyncio.create_task(scanner_loop(ctx.application))
    else:
        await update.message.reply_text("‚ÑπÔ∏è –°–∫–∞–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")


if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", cmd_start))
    
    log.info("Bot started...")
    app.run_polling()
