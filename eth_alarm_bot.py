#!/usr/bin/env python3
# ============================================================================
# v17.0 - Bi-Directional Momentum Strategy
# ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ SHORT-—Å–∏–≥–Ω–∞–ª–æ–≤.
# ‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ H1.
# ‚Ä¢ –ü—Ä–æ–º–ø—Ç LLM –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å—Ç–∞–ª–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ (LONG/SHORT).
# ============================================================================

import os
import asyncio
import json
import logging
from datetime import datetime, timezone
import pandas as pd
import ccxt.async_support as ccxt
import gspread
import aiohttp
import pandas_ta as ta
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.error import BadRequest

# === ENV / Logging ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_IDS = {int(cid) for cid in os.getenv("CHAT_IDS", "0").split(",") if cid}
SHEET_ID = os.getenv("SHEET_ID")
COIN_LIST_SIZE = int(os.getenv("COIN_LIST_SIZE", "200"))
WORKSHEET_NAME = "Trading_Logs_v10"
DEBUG_MODE = os.getenv("DEBUG_MODE", "false").lower() == "true"

LLM_API_KEY = os.getenv("LLM_API_KEY")
LLM_API_URL = os.getenv("LLM_API_URL", "https://api.openai.com/v1/chat/completions")
LLM_MODEL_ID = os.getenv("LLM_MODEL_ID", "gpt-4.1")

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("bot")
for n in ("httpx",): logging.getLogger(n).setLevel(logging.WARNING)

# === GOOGLE SHEETS ===
def setup_google_sheets():
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds_dict = json.loads(os.getenv("GOOGLE_CREDENTIALS"))
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        gs = gspread.authorize(creds)
        spreadsheet = gs.open_by_key(SHEET_ID)
        try:
            worksheet = spreadsheet.worksheet(WORKSHEET_NAME)
        except gspread.WorksheetNotFound:
            log.warning(f"Worksheet '{WORKSHEET_NAME}' not found. Creating it...")
            worksheet = spreadsheet.add_worksheet(title=WORKSHEET_NAME, rows="1000", cols="20")
        HEADERS = ["–î–∞—Ç–∞ –≤—Ö–æ–¥–∞", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–î–µ–ø–æ–∑–∏—Ç", "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞", "Stop Loss", "Take Profit", "P&L —Å–¥–µ–ª–∫–∏ (USDT)", "% –∫ –¥–µ–ø–æ–∑–∏—Ç—É"]
        if worksheet.row_values(1) != HEADERS:
            worksheet.clear(); worksheet.update('A1', [HEADERS]); worksheet.format('A1:I1', {'textFormat': {'bold': True}})
        return worksheet
    except Exception as e:
        log.error("Google Sheets init failed: %s", e)
        return None
LOGS_WS = setup_google_sheets()

# === STATE MANAGEMENT ===
STATE_FILE = "scanner_v10_state.json"
state = {"monitoring": False, "manual_position": None, "last_alert_times": {}}
scanner_task = None
def save_state():
    with open(STATE_FILE, 'w') as f: json.dump(state, f, indent=2)
def load_state():
    global state
    if os.path.exists(STATE_FILE):
        with open(STATE_FILE, 'r') as f: state = json.load(f)
    log.info("State loaded. Manual Position: %s", state.get("manual_position"))

# === EXCHANGE ===
exchange = ccxt.mexc({
    'options': {
        'defaultType': 'swap',
    },
})

# === STRATEGY PARAMS ===
TIMEFRAME_TREND = '1h'
TIMEFRAME_ENTRY = '5m'
SCAN_INTERVAL_SECONDS = 60 * 15
EMA_TREND_LEN = 50
EMA_SHORT_LEN = 9
EMA_LONG_LEN = 21
ADX_LEN = 14
ADX_MOMENTUM_THRESHOLD = 20
MIN_RR_RATIO = 1.2

# === INDICATORS ===
def calculate_indicators(df: pd.DataFrame, is_trend_tf: bool):
    df.ta.adx(length=ADX_LEN, append=True)
    if is_trend_tf:
        df.ta.ema(length=EMA_TREND_LEN, append=True)
    else:
        df.ta.ema(length=EMA_SHORT_LEN, append=True)
        df.ta.ema(length=EMA_LONG_LEN, append=True)
    return df.dropna()

# === LLM ===
LLM_PROMPT = (
    "–¢—ã ‚Äî —ç–ª–∏—Ç–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä-–∞–Ω–∞–ª–∏—Ç–∏–∫ '–°–∏–≥–º–∞'. –¢–µ–±–µ –ø–æ—Å—Ç—É–ø–∏–ª –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏–Ω—è—Ç—å –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.\n\n"
    "–ê–õ–ì–û–†–ò–¢–ú –ê–ù–ê–õ–ò–ó–ê:\n"
    "1.  **–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏:** –ö–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –Ω–∞ `{trade_data['side']}`. \n"
    "2.  **–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ (H1):** –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É —Ç—Ä–µ–Ω–¥—É (—Ü–µ–Ω–∞ –≤—ã—à–µ EMA –¥–ª—è LONG, –Ω–∏–∂–µ EMA –¥–ª—è SHORT)? –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ.\n"
    "3.  **–°–∏–≥–Ω–∞–ª –≤—Ö–æ–¥–∞ (5M):** –°–∏–≥–Ω–∞–ª –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ EMA. –û—Ü–µ–Ω–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ '—á–∏—Å—Ç—ã–º' –∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–º –±—ã–ª–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ. –ù–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ –ª–æ–∂–Ω—ã–º?\n"
    "4.  **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–≤–∏–∂–µ–Ω–∏—è:** –û–ø—Ä–µ–¥–µ–ª–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è. –ï—Å—Ç—å –ª–∏ —É —Ü–µ–Ω—ã '–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è' –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è?\n"
    "5.  **Risk/Reward:** –£—Å—Ç–∞–Ω–æ–≤–∏ –ª–æ–≥–∏—á–Ω—ã–π SL (–¥–ª—è LONG ‚Äî –ø–æ–¥ –º–∏–Ω–∏–º—É–º–æ–º, –¥–ª—è SHORT ‚Äî –Ω–∞–¥ –º–∞–∫—Å–∏–º—É–º–æ–º). –£—Å—Ç–∞–Ω–æ–≤–∏ TP –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —É—Ä–æ–≤–Ω–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è. –†–∞—Å—Å—á–∏—Ç–∞–π R:R.\n"
    f"6.  **–†–µ—à–µ–Ω–∏–µ:** –û–¥–æ–±—Ä—è–π (`APPROVE`) —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏ R:R >= {MIN_RR_RATIO}. –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö ‚Äî `REJECT`.\n\n"
    "–î–∞–π –æ—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –≤ –≤–∏–¥–µ JSON-–æ–±—ä–µ–∫—Ç–∞ —Å –ø–æ–ª—è–º–∏: 'decision', 'confidence_score', 'reasoning', 'suggested_tp', 'suggested_sl'.\n\n"
    "–ê–ù–ê–õ–ò–ó–ò–†–£–ô –°–ï–¢–ê–ü:\n{trade_data}"
)
async def ask_llm(trade_data):
    if not LLM_API_KEY: return {"decision": "N/A", "reasoning": "LLM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."}
    prompt = LLM_PROMPT.format(trade_data=json.dumps(trade_data, indent=2, ensure_ascii=False))
    payload = {"model": LLM_MODEL_ID, "messages": [{"role": "user", "content": prompt}], "temperature": 0.3, "response_format": {"type": "json_object"}}
    headers = {"Authorization": f"Bearer {LLM_API_KEY}", "Content-Type": "application/json"}
    try:
        async with aiohttp.ClientSession() as s:
            async with s.post(LLM_API_URL, json=payload, headers=headers, timeout=90) as r:
                txt = await r.text()
                if r.status != 200:
                    log.error(f"LLM HTTP Error {r.status}: {txt}")
                    return {"decision": "ERROR", "reasoning": f"HTTP {r.status}"}
                response_json = json.loads(txt)
                content_str = response_json["choices"][0]["message"]["content"]
                if "```json" in content_str: clean_msg = content_str.split("```json")[1].split("```")[0]
                else: clean_msg = content_str.strip().strip("`")
                return json.loads(clean_msg)
    except Exception as e:
        log.error(f"LLM request/parse err: %s", e)
        return {"decision": "ERROR", "reasoning": str(e)}

# === MAIN SCANNER LOOP ===
async def scanner_loop(app):
    await broadcast_message(app, "ü§ñ –°–∫–∞–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω. –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ò–º–ø—É–ª—å—Å (LONG/SHORT).")
    try:
        await exchange.load_markets()
        tickers = await exchange.fetch_tickers()
        
        # --- –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –î–õ–Ø –ó–ê–ú–ï–ù–´ ---
        
        # –§–∏–ª—å—Ç—Ä –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä –≤–∏–¥–∞ "BTC/USDT:USDT"
        usdt_pairs = {s: t for s, t in tickers.items() if s.endswith(':USDT') and t.get('quoteVolume') and all(kw not in s for kw in ['UP/', 'DOWN/', 'BEAR/', 'BULL/'])}
        
        sorted_pairs = sorted(usdt_pairs.items(), key=lambda item: item[1]['quoteVolume'], reverse=True)
        coin_list = [item[0] for item in sorted_pairs[:COIN_LIST_SIZE]]
        
        # --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –î–õ–Ø –ó–ê–ú–ï–ù–´ ---

        await broadcast_message(app, f"‚úÖ –°–ø–∏—Å–æ–∫ –∏–∑ {len(coin_list)} –º–æ–Ω–µ—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        log.error(f"Failed to fetch dynamic coin list: %s", e)
        await broadcast_message(app, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥."); return
        
    while state.get('monitoring', False):
        log.info(f"Starting new scan for {len(coin_list)} coins...")
        candidates = []
        for pair in coin_list:
            try:
                # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç–∞—Ä—à–µ–≥–æ –¢–§ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
                ohlcv_h1 = await exchange.fetch_ohlcv(pair, timeframe=TIMEFRAME_TREND, limit=100)
                df_h1 = pd.DataFrame(ohlcv_h1, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                df_h1_with_indicators = calculate_indicators(df_h1.copy(), is_trend_tf=True)
                if len(df_h1_with_indicators) < 2: continue
                
                last_h1 = df_h1_with_indicators.iloc[-1]
                ema_trend = last_h1.get(f'EMA_{EMA_TREND_LEN}')
                if ema_trend is None: continue

                is_global_uptrend = last_h1['close'] > ema_trend
                is_global_downtrend = last_h1['close'] < ema_trend

                if not is_global_uptrend and not is_global_downtrend:
                    if DEBUG_MODE: log.info(f"[DEBUG] {pair:<12} | Trend Filter: NEUTRAL")
                    continue

                # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –º–ª–∞–¥—à–µ–≥–æ –¢–§ –¥–ª—è —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
                ohlcv_5m = await exchange.fetch_ohlcv(pair, timeframe=TIMEFRAME_ENTRY, limit=100)
                df_5m = pd.DataFrame(ohlcv_5m, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                df_5m_with_indicators = calculate_indicators(df_5m.copy(), is_trend_tf=False)
                if len(df_5m_with_indicators) < 2: continue

                prev_5m = df_5m_with_indicators.iloc[-2]
                last_5m = df_5m_with_indicators.iloc[-1]

                ema_short = last_5m.get(f'EMA_{EMA_SHORT_LEN}')
                ema_long = last_5m.get(f'EMA_{EMA_LONG_LEN}')
                prev_ema_short = prev_5m.get(f'EMA_{EMA_SHORT_LEN}')
                prev_ema_long = prev_5m.get(f'EMA_{EMA_LONG_LEN}')
                adx_value = last_5m.get(f'ADX_{ADX_LEN}')

                if any(v is None for v in [ema_short, ema_long, prev_ema_short, prev_ema_long, adx_value]): continue
                
                is_momentum_strong = adx_value > ADX_MOMENTUM_THRESHOLD
                side = None
                
                if is_global_uptrend:
                    ema_crossed_up = prev_ema_short <= prev_ema_long and ema_short > ema_long
                    if is_momentum_strong and ema_crossed_up:
                        side = 'LONG'
                        if DEBUG_MODE: log.info(f"[DEBUG] {pair:<12} | H1 Trend: UP | Found LONG candidate (EMA Cross Up)")
                elif is_global_downtrend:
                    ema_crossed_down = prev_ema_short >= prev_ema_long and ema_short < ema_long
                    if is_momentum_strong and ema_crossed_down:
                        side = 'SHORT'
                        if DEBUG_MODE: log.info(f"[DEBUG] {pair:<12} | H1 Trend: DOWN | Found SHORT candidate (EMA Cross Down)")

                if side:
                    now = datetime.now().timestamp()
                    if (now - state["last_alert_times"].get(pair, 0)) < 3600 * 4: continue
                    
                    candidates.append({
                        "pair": pair, "price": last_5m['close'], 
                        "side": side,
                        "ema_trend_h1": ema_trend,
                        "last_candles": df_5m_with_indicators.tail(10)[['open', 'high', 'low', 'close', 'volume']].to_dict('records')
                    })
            except Exception as e:
                log.error(f"Error processing pair {pair}: {e}")
        
        if candidates:
            log.info(f"Found {len(candidates)} candidates. Sending to LLM for analysis...")
            await broadcast_message(app, f"üîç –ù–∞–π–¥–µ–Ω–æ {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ LLM...")
            
            approved_signals_count = 0
            for candidate in candidates:
                try:
                    trade_data_for_llm = {
                        "asset": candidate["pair"], 
                        "entry_price": candidate["price"],
                        "side": candidate["side"],
                        "ema_trend_h1": candidate["ema_trend_h1"],
                        "last_candles": candidate["last_candles"]
                    }
                    llm_response = await ask_llm(trade_data_for_llm)
                    log.info(f"LLM response for {candidate['pair']}: {llm_response.get('decision')}")

                    if llm_response and llm_response.get('decision') == 'APPROVE':
                        approved_signals_count += 1
                        asset_name = candidate['pair']
                        side = candidate.get('side', 'N/A')
                        suggested_tp = llm_response.get('suggested_tp', 0)
                        suggested_sl = llm_response.get('suggested_sl', 0)

                        message = (
                            f"üîî <b>–°–ò–ì–ù–ê–õ: {side}</b>\n\n"
                            f"<b>–ú–æ–Ω–µ—Ç–∞:</b> <code>{asset_name}</code>\n"
                            f"<b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> <code>{candidate['price']:.4f}</code>\n\n"
                            f"--- <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏ (–æ—Ç LLM)</b> ---\n"
                            f"<b>Take Profit:</b> <code>{suggested_tp:.4f}</code>\n"
                            f"<b>Stop Loss:</b> <code>{suggested_sl:.4f}</code>\n\n"
                            f"--- <b>–ê–Ω–∞–ª–∏–∑ LLM</b> ---\n"
                            f"<i>{llm_response.get('reasoning', '–ù–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è.')}</i>"
                        )
                        await broadcast_message(app, message)
                        state["last_alert_times"][asset_name] = datetime.now().timestamp()
                        save_state()
                    
                    elif llm_response and llm_response.get('decision') == 'REJECT':
                        reason = llm_response.get('reasoning', '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.')
                        side = candidate.get('side', 'N/A')
                        message = (
                            f"üö´ <b>–°–ò–ì–ù–ê–õ {side} –û–¢–ö–õ–û–ù–ï–ù LLM</b>\n\n"
                            f"<b>–ú–æ–Ω–µ—Ç–∞:</b> <code>{candidate['pair']}</code>\n"
                            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> <i>{reason}</i>"
                        )
                        await broadcast_message(app, message)

                    await asyncio.sleep(1)
                except Exception as e:
                    log.error(f"Error during LLM analysis for {candidate['pair']}: {e}")

            if approved_signals_count == 0:
                 await broadcast_message(app, f"‚ÑπÔ∏è –ê–Ω–∞–ª–∏–∑ {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. LLM –Ω–µ –æ–¥–æ–±—Ä–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ.")
        else:
            log.info("No valid candidates found in this scan cycle.")
            await broadcast_message(app, "‚ÑπÔ∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            
        await asyncio.sleep(SCAN_INTERVAL_SECONDS)

# === COMMANDS and RUN ===
async def broadcast_message(app, text):
    for chat_id in app.chat_ids:
        try:
            if hasattr(app, 'chat_ids') and chat_id in app.chat_ids:
                 await app.bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML")
        except BadRequest as e:
            log.error(f"HTML parse failed or other BadRequest for chat {chat_id}: {e}")
            await app.bot.send_message(chat_id=chat_id, text=text)
        except Exception as e:
            log.error(f"An unexpected error occurred in broadcast_message to {chat_id}: {e}")

async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global scanner_task
    chat_id = update.effective_chat.id
    if not hasattr(ctx.application, 'chat_ids'):
        ctx.application.chat_ids = CHAT_IDS
    ctx.application.chat_ids.add(chat_id)
    
    if scanner_task is None or scanner_task.done():
        state['monitoring'] = True
        save_state()
        await update.message.reply_text("‚úÖ –°–∫–∞–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        scanner_task = asyncio.create_task(scanner_loop(ctx.application))
    else:
        await update.message.reply_text("‚ÑπÔ∏è –°–∫–∞–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")

async def cmd_stop(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global scanner_task
    if scanner_task and not scanner_task.done():
        scanner_task.cancel()
        scanner_task = None
    state['monitoring'] = False
    save_state()
    await update.message.reply_text("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def cmd_entry(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global state
    try:
        pair = ctx.args[0].upper()
        if "/" not in pair: pair += "/USDT"
        deposit, entry_price, sl, tp = map(float, ctx.args[1:5])
    except (IndexError, ValueError):
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "<code>/entry &lt;–¢–ò–ö–ï–†&gt; &lt;–¥–µ–ø–æ–∑–∏—Ç&gt; &lt;—Ü–µ–Ω–∞&gt; &lt;sl&gt; &lt;tp&gt;</code>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/entry SOL/USDT 500 135.5 134.8 138.0</code>", 
            parse_mode="HTML"
        )
        return

    state["manual_position"] = {
        "entry_time": datetime.now(timezone.utc).isoformat(),
        "deposit": deposit, "entry_price": entry_price,
        "sl": sl, "tp": tp, "pair": pair, "side": "LONG"
    }
    save_state()
    await update.message.reply_text(f"‚úÖ –í—Ö–æ–¥ –≤—Ä—É—á–Ω—É—é –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: <b>{pair}</b> @ <b>{entry_price}</b>", parse_mode="HTML")

async def cmd_exit(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global state
    pos = state.get("manual_position")
    if not pos:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π —Ä—É—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
        return
    try:
        exit_deposit = float(ctx.args[0])
    except (IndexError, ValueError):
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/exit &lt;–∏—Ç–æ–≥–æ–≤—ã–π_–¥–µ–ø–æ–∑–∏—Ç&gt;</code>", 
            parse_mode="HTML"
        )
        return

    initial_deposit = pos.get('deposit', 0)
    pnl = exit_deposit - initial_deposit
    pct_change = (pnl / initial_deposit) * 100 if initial_deposit != 0 else 0
    
    if LOGS_WS:
        try:
            rr = abs((pos['tp'] - pos['entry_price']) / (pos['sl'] - pos['entry_price'])) if (pos.get('sl') and pos.get('entry_price') and (pos['sl'] - pos['entry_price']) != 0) else 0
            row = [
                datetime.fromisoformat(pos['entry_time']).strftime('%Y-%m-%d %H:%M:%S'),
                pos.get('pair', 'N/A'), pos.get("side", "N/A"),
                initial_deposit, pos.get('entry_price', 'N/A'),
                pos.get('sl', 'N/A'), pos.get('tp', 'N/A'),
                round(rr, 2), round(pnl, 2), round(pct_change, 2)
            ]
            await asyncio.to_thread(LOGS_WS.append_row, row, value_input_option='USER_ENTERED')
        except Exception as e:
            log.error("Failed to write to Google Sheets: %s", e)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É.")

    await update.message.reply_text(
        f"‚úÖ –°–¥–µ–ª–∫–∞ –ø–æ <b>{pos.get('pair', 'N/A')}</b> –∑–∞–∫—Ä—ã—Ç–∞ –∏ –∑–∞–ø–∏—Å–∞–Ω–∞.\n"
        f"<b>P&L: {pnl:+.2f} USDT ({pct_change:+.2f}%)</b>", 
        parse_mode="HTML"
    )
    state["manual_position"] = None
    save_state()

if __name__ == "__main__":
    load_state()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.chat_ids = CHAT_IDS
    
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.add_handler(CommandHandler("entry", cmd_entry))
    app.add_handler(CommandHandler("exit", cmd_exit))

    log.info("Bot started...")
    app.run_polling()
