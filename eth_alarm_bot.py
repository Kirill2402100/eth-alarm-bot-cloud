#!/usr/bin/env python3
# ============================================================================
# v1.0 - Interactive Trading Assistant
# ‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–ø–æ–∏—Å–∫, —Ñ–æ–∫—É—Å, –ø–æ–∑–∏—Ü–∏—è).
# ‚Ä¢ –ë–æ—Ç –≤—ã–±–∏—Ä–∞–µ—Ç –æ–¥–∏–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ –Ω–∏–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
# ‚Ä¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã /entry –∏ /exit –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π.
# ============================================================================

import os
import asyncio
import json
import logging
from datetime import datetime, timezone
import pandas as pd
import ccxt.async_support as ccxt
import gspread
import aiohttp
import pandas_ta as ta
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.error import BadRequest

# === ENV / Logging ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_IDS = {int(cid) for cid in os.getenv("CHAT_IDS", "0").split(",") if cid}
SHEET_ID = os.getenv("SHEET_ID")
COIN_LIST_SIZE = int(os.getenv("COIN_LIST_SIZE", "200"))
WORKSHEET_NAME = "Trading_Logs_v10"

LLM_API_KEY = os.getenv("LLM_API_KEY")
LLM_API_URL = os.getenv("LLM_API_URL", "https://api.openai.com/v1/chat/completions")
LLM_MODEL_ID = os.getenv("LLM_MODEL_ID", "gpt-4.1")

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("bot")
for n in ("httpx",): logging.getLogger(n).setLevel(logging.WARNING)

# === GOOGLE SHEETS ===
def setup_google_sheets():
    try:
        # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds_dict = json.loads(os.getenv("GOOGLE_CREDENTIALS"))
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        gs = gspread.authorize(creds)
        spreadsheet = gs.open_by_key(SHEET_ID)
        try:
            worksheet = spreadsheet.worksheet(WORKSHEET_NAME)
        except gspread.WorksheetNotFound:
            worksheet = spreadsheet.add_worksheet(title=WORKSHEET_NAME, rows="1000", cols="20")
        HEADERS = ["–î–∞—Ç–∞ –≤—Ö–æ–¥–∞", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–î–µ–ø–æ–∑–∏—Ç", "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞", "Stop Loss", "Take Profit", "P&L —Å–¥–µ–ª–∫–∏ (USDT)", "% –∫ –¥–µ–ø–æ–∑–∏—Ç—É"]
        if worksheet.row_values(1) != HEADERS:
            worksheet.clear(); worksheet.update('A1', [HEADERS]); worksheet.format('A1:I1', {'textFormat': {'bold': True}})
        return worksheet
    except Exception as e:
        log.error("Google Sheets init failed: %s", e)
        return None
LOGS_WS = setup_google_sheets()

# === STATE MANAGEMENT ===
STATE_FILE = "assistant_bot_state.json"
state = {}
scanner_task = None
def save_state():
    with open(STATE_FILE, 'w') as f: json.dump(state, f, indent=2)
def load_state():
    global state
    if os.path.exists(STATE_FILE):
        with open(STATE_FILE, 'r') as f: state = json.load(f)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if 'mode' not in state:
        state.update({
            "bot_on": False,
            "mode": "SEARCHING", # SEARCHING, FOCUSED, POSITION_OPEN
            "focus_coin": None,
            "current_position": None,
            "last_signal": None,
            "last_focus_time": 0
        })
    log.info(f"State loaded: {state}")

# === EXCHANGE ===
exchange = ccxt.mexc({'options': {'defaultType': 'swap'}})

# === LLM PROMPTS & FUNCTION ===
PROMPT_SELECT_FOCUS = (
    "–¢—ã ‚Äî —Ç—Ä–µ–π–¥–µ—Ä-–∞–Ω–∞–ª–∏—Ç–∏–∫. –¢–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä —Å –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é. "
    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã–±—Ä–∞—Ç—å –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –û–î–ù–£ –Ω–∞–∏–±–æ–ª–µ–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—É—é –º–æ–Ω–µ—Ç—É –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å —Å —Ü–µ–ª—å—é –ø–æ–∏—Å–∫–∞ –≤—Ö–æ–¥–∞ –≤ LONG –∏–ª–∏ SHORT. "
    "–ò—â–∏ –º–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–±–ª–∏–∂–∞—é—Ç—Å—è –∫ —Å–∏–ª—å–Ω—ã–º —É—Ä–æ–≤–Ω—è–º –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —è–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–º–ø—É–ª—å—Å—É. "
    "–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ –≤–∏–¥–µ JSON-–æ–±—ä–µ–∫—Ç–∞ —Å –æ–¥–Ω–∏–º –ø–æ–ª–µ–º: 'focus_coin', –Ω–∞–ø—Ä–∏–º–µ—Ä: {'focus_coin': 'BTC/USDT:USDT'}."
)
PROMPT_FIND_ENTRY = (
    "–¢—ã ‚Äî —Å–Ω–∞–π–ø–µ—Ä, —Å–ª–µ–¥—è—â–∏–π –∑–∞ –º–æ–Ω–µ—Ç–æ–π {asset}. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª –Ω–∞ –≤—Ö–æ–¥ –≤ —Ç–æ—Ç —Å–∞–º—ã–π –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–¥–µ–∞–ª—å–Ω—ã–π —Å–µ—Ç–∞–ø. "
    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏, –æ–±—ä–µ–º—ã, –∏—â–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏, –ø—Ä–æ–±–æ–∏ –∏–ª–∏ –æ—Ç—Å–∫–æ–∫–∏ –æ—Ç —É—Ä–æ–≤–Ω–µ–π. "
    "–ï—Å–ª–∏ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–µ—Ç, –æ—Ç–≤–µ—Ç—å {'decision': 'WAIT'}. "
    "–ï—Å–ª–∏ –Ω–∞—à–µ–ª –∏–¥–µ–∞–ª—å–Ω—ã–π —Å–µ—Ç–∞–ø, –æ—Ç–≤–µ—Ç—å {'decision': 'ENTER', 'side': 'LONG' –∏–ª–∏ 'SHORT', 'reason': '–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ', 'sl': —á–∏—Å–ª–æ, 'tp': —á–∏—Å–ª–æ}."
)
PROMPT_MANAGE_POSITION = (
    "–¢—ã ‚Äî —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä. –¢—ã –≤–µ–¥–µ—à—å –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é {side} –ø–æ {asset} –æ—Ç —Ü–µ–Ω—ã {entry_price}. "
    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥—É—é –Ω–æ–≤—É—é —Å–≤–µ—á—É. –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –ø–æ –ø–ª–∞–Ω—É, –æ—Ç–≤–µ—Ç—å {'decision': 'HOLD'}. "
    "–ï—Å–ª–∏ –≤–∏–¥–∏—à—å —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–∑–∫–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç, –ø–æ—è–≤–ª–µ–Ω–∏–µ —Å–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞), –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–∞–π –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ: "
    "{'decision': 'CLOSE', 'reason': '–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—á–µ–º—É –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å—Å—è'}. –ù–µ –∂–¥–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞, –µ—Å–ª–∏ –≤–∏–¥–∏—à—å –æ–ø–∞—Å–Ω–æ—Å—Ç—å."
)

async def ask_llm(prompt, data):
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ ask_llm –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–º–ø—Ç –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç)
    final_prompt = prompt.format(**data)
    payload = {"model": LLM_MODEL_ID, "messages": [{"role": "user", "content": final_prompt}], "temperature": 0.4, "response_format": {"type": "json_object"}}
    headers = {"Authorization": f"Bearer {LLM_API_KEY}", "Content-Type": "application/json"}
    try:
        async with aiohttp.ClientSession() as s:
            async with s.post(LLM_API_URL, json=payload, headers=headers, timeout=90) as r:
                # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                txt = await r.text()
                if r.status != 200:
                    log.error(f"LLM HTTP Error {r.status}: {txt}")
                    return None
                response_json = json.loads(txt)
                content_str = response_json["choices"][0]["message"]["content"]
                return json.loads(content_str.strip().strip("`"))
    except Exception as e:
        log.error(f"LLM request/parse err: %s", e)
        return None

# === MAIN BOT LOGIC ===
async def main_loop(app):
    while state.get('bot_on', False):
        try:
            if state['mode'] == 'SEARCHING':
                await run_searching_phase(app)
                await asyncio.sleep(60 * 15) # –ò—â–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å —Ä–∞–∑ –≤ 15 –º–∏–Ω—É—Ç
            elif state['mode'] == 'FOCUSED':
                await run_focused_phase(app)
                await asyncio.sleep(30) # –°–ª–µ–¥–∏–º –∑–∞ —Ü–µ–ª—å—é –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            elif state['mode'] == 'POSITION_OPEN':
                await run_monitoring_phase(app)
                await asyncio.sleep(30) # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            else:
                log.error(f"Unknown bot mode: {state['mode']}")
                state['mode'] = 'SEARCHING' # –°–±—Ä–æ—Å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await asyncio.sleep(60)
        except Exception as e:
            log.error(f"Error in main_loop: {e}")
            await broadcast_message(app, f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(60)

async def run_searching_phase(app):
    log.info("--- Mode: SEARCHING ---")
    await broadcast_message(app, "üîç –ò—â—É –Ω–æ–≤—É—é –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—É—é –º–æ–Ω–µ—Ç—É –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è...")
    try:
        tickers = await exchange.fetch_tickers()
        usdt_pairs = {s: t for s, t in tickers.items() if s.endswith(':USDT') and t.get('quoteVolume')}
        sorted_pairs = sorted(usdt_pairs.items(), key=lambda item: item[1]['quoteVolume'], reverse=True)
        top_coins = [item[0] for item in sorted_pairs[:50]]
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å–Ω—É—é –º–æ–Ω–µ—Ç—É —É LLM
        llm_response = await ask_llm(PROMPT_SELECT_FOCUS, {"asset_list": top_coins})
        
        # ---> –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ë–õ–û–ö–ê –ü–†–û–í–ï–†–û–ö –ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø <---
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –æ–Ω –ø—Ä–∏—Å—ã–ª–∞–µ—Ç
        log.info(f"Raw LLM response for focus selection: {llm_response}")

        # –î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º–∏
        if llm_response and isinstance(llm_response, dict) and 'focus_coin' in llm_response:
            state['focus_coin'] = llm_response['focus_coin']
            state['mode'] = 'FOCUSED'
            state['last_focus_time'] = datetime.now().timestamp()
            log.info(f"LLM selected new focus coin: {state['focus_coin']}")
            await broadcast_message(app, f"üéØ –ù–æ–≤–∞—è —Ü–µ–ª—å –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: <b>{state['focus_coin']}</b>. –ù–∞—á–∏–Ω–∞—é —Å–ª–µ–∂–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.")
            save_state()
        else:
            log.error(f"Failed to get a valid focus coin from LLM. Response was: {llm_response}")
            await broadcast_message(app, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—É—é —Ü–µ–ª—å –æ—Ç LLM. –ü–æ–ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")

        # ---> –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê <---

    except Exception as e:
        log.error(f"Critical error in searching phase: {e}", exc_info=True) # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π traceback –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        
async def run_focused_phase(app):
    log.info(f"--- Mode: FOCUSED on {state['focus_coin']} ---")
    if not state['focus_coin']:
        state['mode'] = 'SEARCHING'
        return
        
    # –¢–∞–π–º–∞—É—Ç: –µ—Å–ª–∏ –∑–∞ 15 –º–∏–Ω—É—Ç –Ω–µ –±—ã–ª–æ —Å–∏–≥–Ω–∞–ª–∞, –∏—â–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å
    if (datetime.now().timestamp() - state.get('last_focus_time', 0)) > 60 * 15:
        await broadcast_message(app, f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–µ—Ç–∞–ø–∞ –ø–æ {state['focus_coin']} –∑–∞ 15 –º–∏–Ω—É—Ç. –ò—â—É –Ω–æ–≤—É—é —Ü–µ–ª—å.")
        state['mode'] = 'SEARCHING'
        return

    try:
        ohlcv = await exchange.fetch_ohlcv(state['focus_coin'], timeframe='5m', limit=100)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        
        llm_data = {"asset": state['focus_coin'], "candles_data": df.to_dict('records')}
        llm_response = await ask_llm(PROMPT_FIND_ENTRY, llm_data)

        if llm_response and llm_response.get('decision') == 'ENTER':
            state['last_signal'] = llm_response
            side = llm_response.get('side')
            reason = llm_response.get('reason')
            sl = llm_response.get('sl')
            tp = llm_response.get('tp')
            
            message = (
                f"üîî <b>–í–ù–ò–ú–ê–ù–ò–ï, –°–ï–¢–ê–ü!</b> üîî\n\n"
                f"<b>–ú–æ–Ω–µ—Ç–∞:</b> <code>{state['focus_coin']}</code>\n"
                f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> <b>{side}</b>\n"
                f"<b>Take Profit:</b> <code>{tp}</code>\n"
                f"<b>Stop Loss:</b> <code>{sl}</code>\n\n"
                f"<b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ LLM:</b> <i>{reason}</i>\n\n"
                f"üëâ –û—Ç–∫—Ä–æ–π—Ç–µ —Å–¥–µ–ª–∫—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π <code>/entry</code>."
            )
            await broadcast_message(app, message)
            # –ú—ã –Ω–µ –º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º, –∂–¥–µ–º –∫–æ–º–∞–Ω–¥—É /entry –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            save_state()

    except Exception as e:
        log.error(f"Error in focused phase for {state['focus_coin']}: {e}")

async def run_monitoring_phase(app):
    log.info(f"--- Mode: POSITION_OPEN on {state['current_position']['pair']} ---")
    pos = state['current_position']
    try:
        ohlcv = await exchange.fetch_ohlcv(pos['pair'], timeframe='1m', limit=100) # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –Ω–∞ –º–∏–Ω—É—Ç–∫–∞—Ö
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        
        llm_data = {"asset": pos['pair'], "side": pos['side'], "entry_price": pos['entry_price'], "candles_data": df.to_dict('records')}
        llm_response = await ask_llm(PROMPT_MANAGE_POSITION, llm_data)

        if llm_response and llm_response.get('decision') == 'CLOSE':
            reason = llm_response.get('reason')
            message = (
                f"‚ö†Ô∏è <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ó–ê–ö–†–´–¢–¨ –ü–û–ó–ò–¶–ò–Æ!</b> ‚ö†Ô∏è\n\n"
                f"<b>–ú–æ–Ω–µ—Ç–∞:</b> <code>{pos['pair']}</code>\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç LLM:</b> <i>{reason}</i>\n\n"
                f"üëâ –ó–∞–∫—Ä–æ–π—Ç–µ —Å–¥–µ–ª–∫—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã—Ö–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π <code>/exit</code>."
            )
            await broadcast_message(app, message)
            # –†–µ–∂–∏–º –Ω–µ –º–µ–Ω—è–µ–º, –∂–¥–µ–º /exit
    except Exception as e:
        log.error(f"Error in monitoring phase for {pos['pair']}: {e}")

# === COMMANDS and RUN ===
async def broadcast_message(app, text):
    for chat_id in app.chat_ids:
        try:
            await app.bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML")
        except Exception as e:
            log.error(f"Failed to send message to {chat_id}: {e}")

async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global scanner_task
    chat_id = update.effective_chat.id
    if not hasattr(ctx.application, 'chat_ids'):
        ctx.application.chat_ids = CHAT_IDS
    ctx.application.chat_ids.add(chat_id)
    
    if not state['bot_on']:
        state['bot_on'] = True
        state['mode'] = 'SEARCHING' # –ù–∞—á–∏–Ω–∞–µ–º –≤—Å–µ–≥–¥–∞ —Å –ø–æ–∏—Å–∫–∞
        save_state()
        await update.message.reply_text("‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —Ü–µ–ª–∏...")
        if scanner_task is None or scanner_task.done():
            scanner_task = asyncio.create_task(main_loop(ctx.application))
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")

async def cmd_stop(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if state['bot_on']:
        state['bot_on'] = False
        save_state()
        await update.message.reply_text("‚ùå –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—Å–µ —Ü–∏–∫–ª—ã –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–∂–µ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def cmd_entry(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if state['mode'] != 'FOCUSED' or not state['last_signal']:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–∏–≥–Ω–∞–ª–∞.")
        return
    try:
        # –§–æ—Ä–º–∞—Ç: /entry —Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞ –¥–µ–ø–æ–∑–∏—Ç
        entry_price = float(ctx.args[0])
        deposit = float(ctx.args[1])
        
        signal = state['last_signal']
        state['current_position'] = {
            "entry_time": datetime.now(timezone.utc).isoformat(),
            "pair": state['focus_coin'],
            "side": signal['side'],
            "deposit": deposit,
            "entry_price": entry_price,
            "sl": signal['sl'],
            "tp": signal['tp']
        }
        state['mode'] = 'POSITION_OPEN'
        state['last_signal'] = None
        save_state()
        await update.message.reply_text(
            f"‚úÖ –ü–æ–∑–∏—Ü–∏—è <b>{state['current_position']['side']}</b> –ø–æ <b>{state['current_position']['pair']}</b> –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.\n"
            f"–ù–∞—á–∏–Ω–∞—é —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ."
        )
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/entry &lt;—Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞&gt; &lt;–¥–µ–ø–æ–∑–∏—Ç&gt;</code>", parse_mode="HTML")

async def cmd_exit(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if state['mode'] != 'POSITION_OPEN' or not state['current_position']:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
        return
    try:
        # –§–æ—Ä–º–∞—Ç: /exit –∏—Ç–æ–≥–æ–≤—ã–π_–¥–µ–ø–æ–∑–∏—Ç
        exit_deposit = float(ctx.args[0])
        pos = state['current_position']

        initial_deposit = pos.get('deposit', 0)
        pnl = exit_deposit - initial_deposit
        pct_change = (pnl / initial_deposit) * 100 if initial_deposit != 0 else 0
        
        if LOGS_WS:
            # ... (–∫–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Google Sheets –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            row = [
                datetime.fromisoformat(pos['entry_time']).strftime('%Y-%m-%d %H:%M:%S'),
                pos.get('pair'), pos.get("side"), initial_deposit,
                pos.get('entry_price'), pos.get('sl'), pos.get('tp'),
                round(pnl, 2), round(pct_change, 2)
            ]
            await asyncio.to_thread(LOGS_WS.append_row, row, value_input_option='USER_ENTERED')

        await update.message.reply_text(
            f"‚úÖ –°–¥–µ–ª–∫–∞ –ø–æ <b>{pos.get('pair')}</b> –∑–∞–∫—Ä—ã—Ç–∞ –∏ –∑–∞–ø–∏—Å–∞–Ω–∞.\n"
            f"<b>P&L: {pnl:+.2f} USDT ({pct_change:+.2f}%)</b>"
        )
        
        state['current_position'] = None
        state['focus_coin'] = None
        state['mode'] = 'SEARCHING' # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∏—Å–∫—É
        save_state()
        
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/exit &lt;–∏—Ç–æ–≥–æ–≤—ã–π_–¥–µ–ø–æ–∑–∏—Ç&gt;</code>", parse_mode="HTML")

if __name__ == "__main__":
    load_state()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.chat_ids = CHAT_IDS
    
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.add_handler(CommandHandler("entry", cmd_entry))
    app.add_handler(CommandHandler("exit", cmd_exit))

    log.info("Bot assistant started...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª, –µ—Å–ª–∏ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if state.get('bot_on', False):
        asyncio.ensure_future(main_loop(app))

    app.run_polling()
