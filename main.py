import os
import asyncio
import logging
from telegram import Update, constants
from telegram.ext import Application, ApplicationBuilder, CommandHandler, ContextTypes, PicklePersistence

# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–±—Ä–∞–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã (json, gspread, oauth2client)

import scanner_engine
import trade_executor

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_VERSION = "EMACross-1.0" # –û–±–Ω–æ–≤–∏–ª–∏ –≤–µ—Ä—Å–∏—é –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logging.getLogger("httpx").setLevel(logging.WARNING)

# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–£–ù–ö–¶–ò–Ø setup_sheets() –ü–û–õ–ù–û–°–¢–¨–Æ –£–î–ê–õ–ï–ù–ê.
# –í—Å—è –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ trade_executor.py

async def post_init(app: Application):
    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª...")
    if app.bot_data.get('run_loop_on_startup', False):
        log.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª–∞–≥ 'run_loop_on_startup'. –ó–∞–ø—É—Å–∫–∞—é –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª.")
        asyncio.create_task(scanner_engine.scanner_main_loop(app, broadcast))
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /info
    await app.bot.set_my_commands([
        ('start', '–ó–∞–ø—É—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        ('run', '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–µ—Ä'),
        ('stop', '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∞–Ω–µ—Ä'),
        ('status', '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å'),
        ('deposit', '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç'),
        ('leverage', '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ')
    ])

async def broadcast(app: Application, txt: str):
    chat_ids = app.bot_data.get('chat_ids', [])
    for cid in chat_ids:
        try:
            await app.bot.send_message(chat_id=cid, text=txt, parse_mode=constants.ParseMode.HTML)
        except Exception as e:
            log.error(f"Send fail to {cid}: {e}")

async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    ctx.bot_data.setdefault('chat_ids', set()).add(chat_id)
    ctx.bot_data.setdefault('deposit', 50)
    ctx.bot_data.setdefault('leverage', 100)
    log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await update.message.reply_text(f"‚úÖ <b>–ë–æ—Ç v{BOT_VERSION} –∑–∞–ø—É—â–µ–Ω.</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /run –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞.", parse_mode=constants.ParseMode.HTML)

async def cmd_run(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    app = ctx.application
    is_running = not (app.bot_data.get('main_loop_task') is None or app.bot_data['main_loop_task'].done())
    if is_running:
        await update.message.reply_text("‚ÑπÔ∏è –°–∫–∞–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return
    
    app.bot_data['bot_on'] = True
    app.bot_data['run_loop_on_startup'] = True
    log.info("–ö–æ–º–∞–Ω–¥–∞ /run: –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª.")
    await update.message.reply_text(f"üöÄ <b>–ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–µ—Ä...</b>")
    task = asyncio.create_task(scanner_engine.scanner_main_loop(app, broadcast))
    app.bot_data['main_loop_task'] = task

async def cmd_stop(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    app = ctx.application
    is_running = not (app.bot_data.get('main_loop_task') is None or app.bot_data['main_loop_task'].done())
    if not is_running:
        await update.message.reply_text("‚ÑπÔ∏è –°–∫–∞–Ω–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return
        
    app.bot_data['bot_on'] = False
    if app.bot_data.get('main_loop_task'):
        app.bot_data['main_loop_task'].cancel()
    app.bot_data['run_loop_on_startup'] = False
    log.info("–ö–æ–º–∞–Ω–¥–∞ /stop: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª.")
    await update.message.reply_text("üõë <b>–°–∫–∞–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>")
    
async def cmd_status(update:Update, ctx:ContextTypes.DEFAULT_TYPE):
    bot_data = ctx.bot_data
    is_running = not (bot_data.get('main_loop_task') is None or bot_data['main_loop_task'].done())
    active_signals = bot_data.get('monitored_signals', [])
    msg = (f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ v{BOT_VERSION}</b>\n"
           f"<b>–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª:</b> {'‚ö°Ô∏è RUNNING' if is_running else 'üîå STOPPED'}\n"
           f"<b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:</b> {len(active_signals)}\n"
           f"<b>–î–µ–ø–æ–∑–∏—Ç:</b> ${bot_data.get('deposit', 50)}\n"
           f"<b>–ü–ª–µ—á–æ:</b> x{bot_data.get('leverage', 100)}\n")
    await update.message.reply_text(msg, parse_mode=constants.ParseMode.HTML)

# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–£–ù–ö–¶–ò–Ø cmd_info –£–î–ê–õ–ï–ù–ê

async def cmd_deposit(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(ctx.args[0])
        ctx.bot_data['deposit'] = amount
        await update.message.reply_text(f"‚úÖ –î–µ–ø–æ–∑–∏—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PNL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>${amount}</b>", parse_mode=constants.ParseMode.HTML)
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /deposit <—Å—É–º–º–∞>")

async def cmd_leverage(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        leverage = int(ctx.args[0])
        ctx.bot_data['leverage'] = leverage
        await update.message.reply_text(f"‚úÖ –ü–ª–µ—á–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PNL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>x{leverage}</b>", parse_mode=constants.ParseMode.HTML)
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /leverage <—á–∏—Å–ª–æ>")

if __name__ == "__main__":
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –≤—ã–∑–æ–≤ setup_sheets() —É–¥–∞–ª–µ–Ω –æ—Ç—Å—é–¥–∞
    persistence = PicklePersistence(filepath="bot_persistence")
    app = ApplicationBuilder().token(BOT_TOKEN).persistence(persistence).post_init(post_init).build()
    
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("run", cmd_run))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.add_handler(CommandHandler("status", cmd_status))
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /info —É–¥–∞–ª–µ–Ω
    app.add_handler(CommandHandler("deposit", cmd_deposit))
    app.add_handler(CommandHandler("leverage", cmd_leverage))
    
    log.info(f"Bot v{BOT_VERSION} starting...")
    app.run_polling()
