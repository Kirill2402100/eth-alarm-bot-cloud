import os
import asyncio
import logging
from telegram import Update, constants, BotCommand
from telegram.ext import Application, ApplicationBuilder, CommandHandler, ContextTypes, PicklePersistence

import scanner_bmr_dca as scanner_engine
import trade_executor

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_VERSION = "BMR-DCA EURC v0.1"
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN env var is not set")

DEFAULT_BANK_USDT = 1000.0
DEFAULT_BUFFER_OVER_EDGE = 0.30

log = logging.getLogger("bot")
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logging.getLogger("httpx").setLevel(logging.WARNING)

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def is_loop_running(app: Application) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∫–∞–Ω–µ—Ä–∞."""
    task = getattr(app, "_main_loop_task", None)
    return task is not None and not task.done()

async def post_init(app: Application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª...")
    if app.bot_data.get('run_loop_on_startup', False):
        log.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª–∞–≥ 'run_loop_on_startup'. –ó–∞–ø—É—Å–∫–∞—é –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª.")
        task = asyncio.create_task(scanner_engine.scanner_main_loop(app, broadcast))
        setattr(app, "_main_loop_task", task)

    # –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /close
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("run", "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–µ—Ä"),
        BotCommand("stop", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∞–Ω–µ—Ä"),
        BotCommand("status", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"),
        BotCommand("pause", "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"),
        BotCommand("resume", "–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"),
        BotCommand("close", "–ó–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ä—ã–Ω–∫—É"),
        BotCommand("setbank", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π –±–∞–Ω–∫ –ø–æ–∑–∏—Ü–∏–∏, USDT"),
        BotCommand("setbuf", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É—Ñ–µ—Ä –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π (–Ω–∞–ø—Ä. 0.3 –∏–ª–∏ 30%)"),
    ])

async def broadcast(app: Application, txt: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ—á–∏—Å—Ç–∫–æ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö."""
    chat_ids = set(app.bot_data.get('chat_ids', set()))
    for cid in list(chat_ids):
        try:
            await app.bot.send_message(chat_id=cid, text=txt, parse_mode=constants.ParseMode.HTML)
        except Exception as e:
            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {cid}: {e}")
            if "bot was blocked" in str(e):
                chat_ids.discard(cid)
                log.info(f"–ß–∞—Ç {cid} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (–±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω).")
    app.bot_data['chat_ids'] = chat_ids

async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    chat_id = update.effective_chat.id
    bd = ctx.bot_data
    bd.setdefault('chat_ids', set()).add(chat_id)
    bd.setdefault('run_loop_on_startup', False)
    bd.setdefault('scan_paused', False)
    log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await update.message.reply_text(
        f"‚úÖ <b>–ë–æ—Ç {BOT_VERSION} –∑–∞–ø—É—â–µ–Ω.</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /run –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞.",
        parse_mode=constants.ParseMode.HTML
    )

async def cmd_run(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /run."""
    app = ctx.application
    if is_loop_running(app):
        await update.message.reply_text("‚ÑπÔ∏è –°–∫–∞–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    app.bot_data['bot_on'] = True
    app.bot_data['run_loop_on_startup'] = True
    app.bot_data['scan_paused'] = False
    log.info("–ö–æ–º–∞–Ω–¥–∞ /run: –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª.")
    task = asyncio.create_task(scanner_engine.scanner_main_loop(app, broadcast))
    setattr(app, "_main_loop_task", task)
    await update.message.reply_text("üöÄ <b>–ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–µ—Ä...</b>", parse_mode=constants.ParseMode.HTML)

async def cmd_stop(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop."""
    app = ctx.application
    if not is_loop_running(app):
        await update.message.reply_text("‚ÑπÔ∏è –°–∫–∞–Ω–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return

    app.bot_data['bot_on'] = False
    task = getattr(app, "_main_loop_task", None)
    if task:
        task.cancel()
        try:
            await task
        except asyncio.CancelledError:
            log.info("–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        setattr(app, "_main_loop_task", None)
        
    app.bot_data['run_loop_on_startup'] = False
    log.info("–ö–æ–º–∞–Ω–¥–∞ /stop: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª.")
    await update.message.reply_text("üõë <b>–°–∫–∞–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>", parse_mode=constants.ParseMode.HTML)

async def cmd_pause(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."""
    if not is_loop_running(ctx.application):
        await update.message.reply_text("‚ÑπÔ∏è –°–∫–∞–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –Ω–µ—á–µ–≥–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É.")
        return
    ctx.bot_data["scan_paused"] = True
    log.info("–ö–æ–º–∞–Ω–¥–∞ /pause: –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    await update.message.reply_text("‚è∏Ô∏è <b>–ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>\n–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è. –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /resume.", parse_mode=constants.ParseMode.HTML)

async def cmd_resume(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."""
    if not is_loop_running(ctx.application):
        await update.message.reply_text("‚ÑπÔ∏è –°–∫–∞–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        return
    ctx.bot_data["scan_paused"] = False
    log.info("–ö–æ–º–∞–Ω–¥–∞ /resume: –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω.")
    await update.message.reply_text("‚ñ∂Ô∏è <b>–ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω.</b>", parse_mode=constants.ParseMode.HTML)

# –î–û–ë–ê–í–õ–ï–ù–û: –ö–æ–º–∞–Ω–¥–∞ —Ä—É—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
async def cmd_close(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not ctx.bot_data.get("position"):
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.")
        return
    ctx.bot_data["force_close"] = True
    await update.message.reply_text("üß∞ –ó–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ä—ã–Ω–∫—É –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–º —Ü–∏–∫–ª–µ‚Ä¶")

async def cmd_setbank(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        val = float(ctx.args[0])
        if val <= 0: raise ValueError
        ctx.bot_data["safety_bank_usdt"] = val
        await update.message.reply_text(f"üí∞ –ë–∞–Ω–∫ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {val:.2f} USDT")
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setbank 1000")

async def cmd_setbuf(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        raw = ctx.args[0].strip().replace('%','')
        v = float(raw)
        buf = v/100.0 if v > 1 else v
        if not (0.0 < buf < 0.9): raise ValueError
        ctx.bot_data["buffer_over_edge"] = buf
        await update.message.reply_text(f"üõ°Ô∏è –ë—É—Ñ–µ—Ä –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {buf:.2%}")
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setbuf 0.30 (–∏–ª–∏ 30%)")

async def cmd_status(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
    bot_data = ctx.bot_data
    is_running = is_loop_running(ctx.application)
    is_paused = bot_data.get("scan_paused", False)
    
    active_position = bot_data.get('position', None)
    cfg = scanner_engine.CONFIG

    scanner_status = "üîå –û–°–¢–ê–ù–û–í–õ–ï–ù"
    if is_running:
        scanner_status = "‚è∏Ô∏è –ù–ê –ü–ê–£–ó–ï" if is_paused else "‚ö°Ô∏è –†–ê–ë–û–¢–ê–ï–¢"

    position_status = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏."
    if active_position:
        pos = active_position
        sl_show = f"{pos.sl_price:.6f}" if pos.sl_price is not None else "N/A"
        tp_show = f"{pos.tp_price:.6f}" if getattr(pos, "tp_price", None) else "N/A"
        avg_show = f"{pos.avg:.6f}" if getattr(pos, "avg", None) else "N/A"

        max_steps = getattr(pos, "max_steps", (len(getattr(pos, "step_margins", [])) or scanner_engine.CONFIG.DCA_LEVELS))
        lev_show = getattr(pos, "leverage", getattr(scanner_engine.CONFIG, "LEVERAGE", "N/A"))
        
        reserved = getattr(pos, "reserved_one", False)
        remaining = max(0, getattr(pos, "max_steps", 0) - getattr(pos, "steps_filled", 0))
        
        position_status = (
            f"‚Ä¢ <b>–°–∏–≥–Ω–∞–ª ID:</b> {pos.signal_id}\n"
            f"‚Ä¢ <b>–°—Ç–æ—Ä–æ–Ω–∞:</b> {pos.side}\n"
            f"‚Ä¢ <b>–ü–ª–µ—á–æ:</b> {lev_show}x\n"
            f"‚Ä¢ <b>–°—Ç—É–ø–µ–Ω–µ–π:</b> {pos.steps_filled} / {max_steps}\n"
            f"‚Ä¢ <b>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:</b> <code>{avg_show}</code>\n"
            f"‚Ä¢ <b>TP/SL:</b> <code>{tp_show}</code> / <code>{sl_show}</code>\n"
            f"‚Ä¢ <b>–†–µ–∑–µ—Ä–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:</b> {'–î–∞' if reserved else '–ù–µ—Ç'}\n"
            f"‚Ä¢ <b>–û—Å—Ç–∞–ª–æ—Å—å (–æ–±—ã—á–Ω—ã—Ö | —Ä–µ–∑–µ—Ä–≤):</b> {remaining if not reserved else 0} | {1 if reserved and remaining > 0 else (1 if not reserved else 0)}"
        )
    
    bank = bot_data.get("safety_bank_usdt", getattr(cfg, "SAFETY_BANK_USDT", DEFAULT_BANK_USDT))
    buf  = bot_data.get("buffer_over_edge", getattr(cfg, "BUFFER_OVER_EDGE", DEFAULT_BUFFER_OVER_EDGE))
    step = bot_data.get("base_step_margin", getattr(cfg, "BASE_STEP_MARGIN", 10.0))
    
    msg = (
        f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ {BOT_VERSION}</b>\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞:</b> {scanner_status}\n\n"
        f"<b><u>–†–∏—Å–∫/–±–∞–Ω–∫:</u></b>\n"
        f"‚Ä¢ –ë–∞–Ω–∫ –ø–æ–∑–∏—Ü–∏–∏: <b>{bank:.2f} USDT</b>\n"
        f"‚Ä¢ –ë—É—Ñ–µ—Ä –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π: <b>{buf:.2%}</b> (–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ –≤ MARGIN-—Ä–µ–∂–∏–º–µ)\n"
        f"‚Ä¢ –î–µ–ø–æ–∑–∏—Ç –Ω–∞ —à–∞–≥: <b>{step:.2f} USDT</b> (–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏ bank-first)\n"
        f"‚Ä¢ DCA: 4 –≤–Ω—É—Ç—Ä. + 1 —Ä–µ–∑–µ—Ä–≤\n\n"
        f"<b><u>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:</u></b>\n{position_status}"
    )

    await update.message.reply_text(msg, parse_mode=constants.ParseMode.HTML)


if __name__ == "__main__":
    persistence = PicklePersistence(filepath="bot_persistence")
    app = ApplicationBuilder().token(BOT_TOKEN).persistence(persistence).post_init(post_init).build()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("run", cmd_run))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("pause", cmd_pause))
    app.add_handler(CommandHandler("resume", cmd_resume))
    app.add_handler(CommandHandler("setbank", cmd_setbank))
    app.add_handler(CommandHandler("setbuf", cmd_setbuf))
    # –î–û–ë–ê–í–õ–ï–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–∞ /close
    app.add_handler(CommandHandler("close", cmd_close))

    log.info(f"Bot {BOT_VERSION} starting...")
    app.run_polling()
