import os
import asyncio
import logging
import json
from telegram import Update, constants
from telegram.ext import Application, ApplicationBuilder, CommandHandler, ContextTypes, PicklePersistence
import gspread
from oauth2client.service_account import ServiceAccountCredentials

import scanner_engine
import trade_executor

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_VERSION = "SwingBot-1.3"
BOT_TOKEN = os.getenv("BOT_TOKEN")
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Google Sheets
SHEET_ID = os.getenv("SHEET_ID")
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS")

log = logging.getLogger("bot")
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("gspread").setLevel(logging.WARNING)


def setup_sheets():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ Google Sheets –∏ –Ω–∞—Ö–æ–¥–∏—Ç/—Å–æ–∑–¥–∞–µ—Ç –æ–±–∞ —Ä–∞–±–æ—á–∏—Ö –ª–∏—Å—Ç–∞."""
    if not SHEET_ID or not GOOGLE_CREDENTIALS:
        log.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Google Sheets –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
        return
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds_dict = json.loads(GOOGLE_CREDENTIALS)
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        gs = gspread.authorize(creds)
        ss = gs.open_by_key(SHEET_ID)

        # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏—Å—Ç–∞ 'Trading_Log' ---
        trade_sheet_name = "Trading_Log"
        headers_trade = ["Signal_ID", "Timestamp_UTC", "Pair", "Side", "Status", "Entry_Price", "Exit_Price", "Exit_Time_UTC", "Exit_Reason", "PNL_USD", "PNL_Percent"]
        try:
            worksheet_trade = ss.worksheet(trade_sheet_name)
            if worksheet_trade.row_values(1) != headers_trade:
                worksheet_trade.clear()
                worksheet_trade.append_row(headers_trade)
                worksheet_trade.format("A1:K1", {"textFormat": {"bold": True}})
                log.info(f"Headers for '{trade_sheet_name}' have been updated.")
        except gspread.WorksheetNotFound:
            log.info(f"–õ–∏—Å—Ç '{trade_sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.")
            worksheet_trade = ss.add_worksheet(title=trade_sheet_name, rows="2000", cols=len(headers_trade))
            worksheet_trade.append_row(headers_trade)
            worksheet_trade.format("A1:K1", {"textFormat": {"bold": True}})
        
        trade_executor.TRADE_LOG_WS = worksheet_trade
        log.info(f"Google Sheets –≥–æ—Ç–æ–≤. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –≤ –ª–∏—Å—Ç '{trade_sheet_name}'.")

        # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏—Å—Ç–∞ 'Diagnostic_Log' ---
        diag_sheet_name = "Diagnostic_Log"
        headers_diag = ["Timestamp_UTC", "Pair", "Side", "EMA_State_OK", "Trend_OK", "Stoch_OK", "Reason_For_Fail"]
        try:
            worksheet_diag = ss.worksheet(diag_sheet_name)
        except gspread.WorksheetNotFound:
            log.info(f"–õ–∏—Å—Ç '{diag_sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.")
            worksheet_diag = ss.add_worksheet(title=diag_sheet_name, rows="5000", cols=len(headers_diag))
            worksheet_diag.append_row(headers_diag)
            worksheet_diag.format("A1:G1", {"textFormat": {"bold": True}})
            
        trade_executor.DIAGNOSTIC_LOG_WS = worksheet_diag
        log.info(f"Google Sheets –≥–æ—Ç–æ–≤. –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ª–∏—Å—Ç '{diag_sheet_name}'.")

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}", exc_info=True)


async def post_init(app: Application):
    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª...")
    if app.bot_data.get('run_loop_on_startup', False):
        log.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª–∞–≥ 'run_loop_on_startup'. –ó–∞–ø—É—Å–∫–∞—é –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª.")
        asyncio.create_task(scanner_engine.scanner_main_loop(app, broadcast))
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã
    await app.bot.set_my_commands([
        ('start', '–ó–∞–ø—É—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        ('run', '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–µ—Ä'),
        ('stop', '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∞–Ω–µ—Ä'),
        ('status', '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å'),
    ])

async def broadcast(app: Application, txt: str):
    chat_ids = app.bot_data.get('chat_ids', set())
    for cid in chat_ids:
        try:
            await app.bot.send_message(chat_id=cid, text=txt, parse_mode=constants.ParseMode.HTML)
        except Exception as e:
            log.error(f"Send fail to {cid}: {e}")

async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    ctx.bot_data.setdefault('chat_ids', set()).add(chat_id)
    log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await update.message.reply_text(f"‚úÖ <b>–ë–æ—Ç v{BOT_VERSION} –∑–∞–ø—É—â–µ–Ω.</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /run –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞.", parse_mode=constants.ParseMode.HTML)

async def cmd_run(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    app = ctx.application
    is_running = not (app.bot_data.get('main_loop_task') is None or app.bot_data['main_loop_task'].done())
    if is_running:
        await update.message.reply_text("‚ÑπÔ∏è –°–∫–∞–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return
    
    app.bot_data['bot_on'] = True
    app.bot_data['run_loop_on_startup'] = True
    log.info("–ö–æ–º–∞–Ω–¥–∞ /run: –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª.")
    await update.message.reply_text(f"üöÄ <b>–ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–µ—Ä...</b>")
    task = asyncio.create_task(scanner_engine.scanner_main_loop(app, broadcast))
    app.bot_data['main_loop_task'] = task

async def cmd_stop(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    app = ctx.application
    is_running = not (app.bot_data.get('main_loop_task') is None or app.bot_data['main_loop_task'].done())
    if not is_running:
        await update.message.reply_text("‚ÑπÔ∏è –°–∫–∞–Ω–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return
        
    app.bot_data['bot_on'] = False
    if app.bot_data.get('main_loop_task'):
        app.bot_data['main_loop_task'].cancel()
    app.bot_data['run_loop_on_startup'] = False
    log.info("–ö–æ–º–∞–Ω–¥–∞ /stop: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª.")
    await update.message.reply_text("üõë <b>–°–∫–∞–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>")
    
async def cmd_status(update:Update, ctx:ContextTypes.DEFAULT_TYPE):
    bot_data = ctx.bot_data
    is_running = not (bot_data.get('main_loop_task') is None or bot_data['main_loop_task'].done())
    active_trades = bot_data.get('active_trades', [])
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ATR-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    cfg = scanner_engine.CONFIG
    
    msg = (f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ v{BOT_VERSION}</b>\n\n"
           f"<b>–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª:</b> {'‚ö°Ô∏è RUNNING' if is_running else 'üîå STOPPED'}\n"
           f"<b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:</b> {len(active_trades)} / {cfg.MAX_CONCURRENT_POSITIONS}\n\n"
           f"<b><u>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</u></b>\n"
           f"<b>–¢–∞–π–º—Ñ—Ä–µ–π–º:</b> {cfg.TIMEFRAME}\n"
           f"<b>–ü–ª–µ—á–æ:</b> x{cfg.LEVERAGE}\n"
           f"<b>SL:</b> {cfg.ATR_SL_MULT} √ó ATR (–º–∏–Ω {cfg.SL_MIN_PCT}%, –º–∞–∫—Å {cfg.SL_MAX_PCT}%)\n"
           f"<b>RR:</b> 1:{cfg.RISK_REWARD}")
           
    await update.message.reply_text(msg, parse_mode=constants.ParseMode.HTML)


if __name__ == "__main__":
    setup_sheets()
    persistence = PicklePersistence(filepath="bot_persistence")
    app = ApplicationBuilder().token(BOT_TOKEN).persistence(persistence).post_init(post_init).build()
    
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("run", cmd_run))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.add_handler(CommandHandler("status", cmd_status))
    
    log.info(f"Bot v{BOT_VERSION} starting...")
    app.run_polling()
