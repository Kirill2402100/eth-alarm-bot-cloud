# main.py

import os
import asyncio
import logging
from telegram import Update, constants
from telegram.ext import Application, ApplicationBuilder, CommandHandler, ContextTypes, PicklePersistence

# –≠—Ç–∏ –º–æ–¥—É–ª–∏ —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –æ—Ç–≤–µ—á–∞—Ç—å –∑–∞ –≤—Å—é –ª–æ–≥–∏–∫—É
import scanner_engine
import trade_executor

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_VERSION = "SwingBot-1.4" # –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")

log = logging.getLogger("bot")
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logging.getLogger("httpx").setLevel(logging.WARNING)

# –£–î–ê–õ–ï–ù–û: –í—Å—è –ª–æ–≥–∏–∫–∞ setup_sheets() —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ scanner_engine.py,
# —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã —Å –∏–º–µ–Ω–∞–º–∏ –ª–∏—Å—Ç–æ–≤ –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞.

async def post_init(app: Application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª...")
    if app.bot_data.get('run_loop_on_startup', False):
        log.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª–∞–≥ 'run_loop_on_startup'. –ó–∞–ø—É—Å–∫–∞—é –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª.")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Å–∫–∞–Ω–µ—Ä–∞
        asyncio.create_task(scanner_engine.scanner_main_loop(app, broadcast))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    await app.bot.set_my_commands([
        ('start', '–ó–∞–ø—É—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        ('run', '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–µ—Ä'),
        ('stop', '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∞–Ω–µ—Ä'),
        ('status', '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'),
    ])

async def broadcast(app: Application, txt: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    chat_ids = app.bot_data.get('chat_ids', set())
    for cid in chat_ids:
        try:
            await app.bot.send_message(chat_id=cid, text=txt, parse_mode=constants.ParseMode.HTML)
        except Exception as e:
            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {cid}: {e}")

async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    chat_id = update.effective_chat.id
    ctx.bot_data.setdefault('chat_ids', set()).add(chat_id)
    log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await update.message.reply_text(
        f"‚úÖ <b>–ë–æ—Ç v{BOT_VERSION} –∑–∞–ø—É—â–µ–Ω.</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /run –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞.",
        parse_mode=constants.ParseMode.HTML
    )

async def cmd_run(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /run."""
    app = ctx.application
    is_running = not (app.bot_data.get('main_loop_task') is None or app.bot_data['main_loop_task'].done())
    if is_running:
        await update.message.reply_text("‚ÑπÔ∏è –°–∫–∞–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return
    
    app.bot_data['bot_on'] = True
    app.bot_data['run_loop_on_startup'] = True
    log.info("–ö–æ–º–∞–Ω–¥–∞ /run: –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª.")
    await update.message.reply_text("üöÄ <b>–ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–µ—Ä...</b>")
    task = asyncio.create_task(scanner_engine.scanner_main_loop(app, broadcast))
    app.bot_data['main_loop_task'] = task

async def cmd_stop(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop."""
    app = ctx.application
    is_running = not (app.bot_data.get('main_loop_task') is None or app.bot_data['main_loop_task'].done())
    if not is_running:
        await update.message.reply_text("‚ÑπÔ∏è –°–∫–∞–Ω–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return
        
    app.bot_data['bot_on'] = False
    if app.bot_data.get('main_loop_task'):
        app.bot_data['main_loop_task'].cancel()
    app.bot_data['run_loop_on_startup'] = False
    log.info("–ö–æ–º–∞–Ω–¥–∞ /stop: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª.")
    await update.message.reply_text("üõë <b>–°–∫–∞–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>")
    
# –ò–ó–ú–ï–ù–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
async def cmd_status(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
    bot_data = ctx.bot_data
    is_running = not (bot_data.get('main_loop_task') is None or bot_data['main_loop_task'].done())
    active_trades = bot_data.get('active_trades', [])
    
    cfg = scanner_engine.CONFIG
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Risk/Reward Ratio
    rr_ratio = cfg.TP_FIXED_PCT / cfg.SL_FIXED_PCT if cfg.SL_FIXED_PCT > 0 else 0
    
    msg = (
        f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ v{BOT_VERSION}</b>\n\n"
        f"<b>–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª:</b> {'‚ö°Ô∏è –†–ê–ë–û–¢–ê–ï–¢' if is_running else 'üîå –û–°–¢–ê–ù–û–í–õ–ï–ù'}\n"
        f"<b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:</b> {len(active_trades)} / {cfg.MAX_CONCURRENT_POSITIONS}\n\n"
        f"<b><u>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</u></b>\n"
        f"‚Ä¢ <b>SL:</b> {cfg.SL_FIXED_PCT:.2f}%\n"
        f"‚Ä¢ <b>TP:</b> {cfg.TP_FIXED_PCT:.2f}% (RR 1:{rr_ratio:.1f})\n"
        "‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ\n"
        f"‚Ä¢ <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ SL:</b> –ø—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ +{cfg.TRAIL_TRIGGER_PCT:.2f}%\n"
        f"‚Ä¢ <b>–ù–æ–≤—ã–π SL –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞:</b> —Ñ–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏ +{cfg.TRAIL_PROFIT_LOCK_PCT:.2f}%\n"
    )
    
    await update.message.reply_text(msg, parse_mode=constants.ParseMode.HTML)


if __name__ == "__main__":
    # –£–î–ê–õ–ï–ù–û: setup_sheets() —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ scanner_engine
    persistence = PicklePersistence(filepath="bot_persistence")
    app = ApplicationBuilder().token(BOT_TOKEN).persistence(persistence).post_init(post_init).build()
    
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("run", cmd_run))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.add_handler(CommandHandler("status", cmd_status))
    
    log.info(f"Bot v{BOT_VERSION} starting...")
    app.run_polling()
