# main.py
import os
import asyncio
import json
import logging
from telegram import Update, constants
from telegram.ext import Application, ApplicationBuilder, CommandHandler, ContextTypes, PicklePersistence
import gspread
from oauth2client.service_account import ServiceAccountCredentials

log = logging.getLogger("bot")
import scanner_engine
import trade_executor

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_VERSION = "StochRSI-TrendFilter-1.0" # <<< –û–±–Ω–æ–≤–∏–ª–∏ –≤–µ—Ä—Å–∏—é
BOT_TOKEN = os.getenv("BOT_TOKEN")
SHEET_ID = os.getenv("SHEET_ID")
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS")

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logging.getLogger("httpx").setLevel(logging.WARNING)

def setup_sheets():
    if not SHEET_ID or not GOOGLE_CREDENTIALS:
        log.warning("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
        return
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds_dict = json.loads(GOOGLE_CREDENTIALS)
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        gs = gspread.authorize(creds)
        ss = gs.open_by_key(SHEET_ID)

        # --- –õ–∏—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–¥–µ–ª–æ–∫ ---
        trade_sheet_name = "Trading_Log"
        try:
            trade_worksheet = ss.worksheet(trade_sheet_name)
        except gspread.WorksheetNotFound:
            log.info(f"–õ–∏—Å—Ç '{trade_sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.")
            headers = [
                "Signal_ID", "Timestamp_UTC", "Pair", "side", "Status",
                "Entry_Price", "Exit_Price", "SL_Price", "TP_Price",
                "PNL_USD", "PNL_Percent", "Exit_Time_UTC", "StochRSI_at_Entry"
            ]
            trade_worksheet = ss.add_worksheet(title=trade_sheet_name, rows="2000", cols=len(headers))
            trade_worksheet.update(range_name="A1", values=[headers])
            trade_worksheet.format(f"A1:{chr(ord('A')+len(headers)-1)}1", {"textFormat": {"bold": True}})
        trade_executor.TRADE_LOG_WS = trade_worksheet
        log.info(f"Google-Sheets ready. Logging trades to '{trade_sheet_name}'.")

        # <<< –ù–û–í–´–ô –õ–ò–°–¢ –î–õ–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ò >>>
        analysis_sheet_name = "Strategy_Analysis_Log"
        try:
            analysis_worksheet = ss.worksheet(analysis_sheet_name)
        except gspread.WorksheetNotFound:
            log.info(f"–õ–∏—Å—Ç '{analysis_sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.")
            headers = ["Timestamp_UTC", "Close_Price", "StochRSI_k", "EMA_200", "Trend_Direction"]
            analysis_worksheet = ss.add_worksheet(title=analysis_sheet_name, rows="10000", cols=len(headers))
            analysis_worksheet.update(range_name="A1", values=[headers])
            analysis_worksheet.format(f"A1:{chr(ord('A')+len(headers)-1)}1", {"textFormat": {"bold": True}})
        trade_executor.ANALYSIS_LOG_WS = analysis_worksheet
        log.info(f"Google-Sheets ready. Logging analysis to '{analysis_sheet_name}'.")

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")


# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ main.py –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

async def post_init(app: Application):
    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª...")
    if app.bot_data.get('run_loop_on_startup', False):
        log.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª–∞–≥ 'run_loop_on_startup'. –ó–∞–ø—É—Å–∫–∞—é –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª.")
        asyncio.create_task(scanner_engine.scanner_main_loop(app, broadcast))
    await app.bot.set_my_commands([
        ('start', '–ó–∞–ø—É—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        ('run', '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–µ—Ä'),
        ('stop', '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∞–Ω–µ—Ä'),
        ('status', '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å'),
        ('info', '–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å live-–ª–æ–≥–∏'),
        ('deposit', '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç'),
        ('leverage', '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ')
    ])

async def broadcast(app: Application, txt: str):
    chat_ids = app.bot_data.get('chat_ids', [])
    for cid in chat_ids:
        try:
            await app.bot.send_message(chat_id=cid, text=txt, parse_mode=constants.ParseMode.HTML)
        except Exception as e:
            log.error(f"Send fail to {cid}: {e}")

async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    ctx.bot_data.setdefault('chat_ids', set()).add(chat_id)
    ctx.bot_data.setdefault('deposit', 50)
    ctx.bot_data.setdefault('leverage', 100)
    log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await update.message.reply_text(f"‚úÖ <b>–ë–æ—Ç v{BOT_VERSION} –∑–∞–ø—É—â–µ–Ω.</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /run –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞.", parse_mode=constants.ParseMode.HTML)

async def cmd_run(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    app = ctx.application
    is_running = not (app.bot_data.get('main_loop_task') is None or app.bot_data['main_loop_task'].done())
    if is_running:
        await update.message.reply_text("‚ÑπÔ∏è –°–∫–∞–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return
    
    app.bot_data['bot_on'] = True
    app.bot_data['run_loop_on_startup'] = True
    log.info("–ö–æ–º–∞–Ω–¥–∞ /run: –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª.")
    await update.message.reply_text(f"üöÄ <b>–ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–µ—Ä...</b>")
    task = asyncio.create_task(scanner_engine.scanner_main_loop(app, broadcast))
    app.bot_data['main_loop_task'] = task

async def cmd_stop(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    app = ctx.application
    is_running = not (app.bot_data.get('main_loop_task') is None or app.bot_data['main_loop_task'].done())
    if not is_running:
        await update.message.reply_text("‚ÑπÔ∏è –°–∫–∞–Ω–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return
        
    app.bot_data['bot_on'] = False
    if app.bot_data.get('main_loop_task'):
        app.bot_data['main_loop_task'].cancel()
    app.bot_data['run_loop_on_startup'] = False
    log.info("–ö–æ–º–∞–Ω–¥–∞ /stop: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª.")
    await update.message.reply_text("üõë <b>–°–∫–∞–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>")
    
async def cmd_status(update:Update, ctx:ContextTypes.DEFAULT_TYPE):
    bot_data = ctx.bot_data
    is_running = not (bot_data.get('main_loop_task') is None or bot_data['main_loop_task'].done())
    active_signals = bot_data.get('monitored_signals', [])
    msg = (f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ v{BOT_VERSION}</b>\n"
           f"<b>–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª:</b> {'‚ö°Ô∏è RUNNING' if is_running else 'üîå STOPPED'}\n"
           f"<b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:</b> {len(active_signals)}\n"
           f"<b>–î–µ–ø–æ–∑–∏—Ç:</b> ${bot_data.get('deposit', 50)}\n"
           f"<b>–ü–ª–µ—á–æ:</b> x{bot_data.get('leverage', 100)}\n")
    await update.message.reply_text(msg, parse_mode=constants.ParseMode.HTML)

async def cmd_info(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    current_state = ctx.bot_data.get("live_info_on", False)
    new_state = not current_state
    ctx.bot_data["live_info_on"] = new_state
    msg = "‚úÖ <b>Live-–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ.</b>" if new_state else "‚ùå <b>Live-–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ.</b>"
    await update.message.reply_text(msg, parse_mode=constants.ParseMode.HTML)

async def cmd_deposit(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(ctx.args[0])
        ctx.bot_data['deposit'] = amount
        await update.message.reply_text(f"‚úÖ –î–µ–ø–æ–∑–∏—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PNL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>${amount}</b>", parse_mode=constants.ParseMode.HTML)
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /deposit <—Å—É–º–º–∞>")

async def cmd_leverage(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        leverage = int(ctx.args[0])
        ctx.bot_data['leverage'] = leverage
        await update.message.reply_text(f"‚úÖ –ü–ª–µ—á–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PNL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>x{leverage}</b>", parse_mode=constants.ParseMode.HTML)
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /leverage <—á–∏—Å–ª–æ>")

if __name__ == "__main__":
    setup_sheets()
    persistence = PicklePersistence(filepath="bot_persistence")
    app = ApplicationBuilder().token(BOT_TOKEN).persistence(persistence).post_init(post_init).build()
    
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("run", cmd_run))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("info", cmd_info))
    app.add_handler(CommandHandler("deposit", cmd_deposit))
    app.add_handler(CommandHandler("leverage", cmd_leverage))
    
    log.info(f"Bot v{BOT_VERSION} starting...")
    app.run_polling()
