# File: data_feeder.py (v4 - With Order Book Depth)

import asyncio
import ccxt.pro as ccxtpro
from telegram import constants

# –ù–∞—à "–±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫" –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –§–∞–∑—ã 1
SYMBOLS = [
    'BTC/USDT:USDT', 'ETH/USDT:USDT', 'SOL/USDT:USDT',
    'WLD/USDT:USDT', 'ORDI/USDT:USDT', 'PEPE/USDT:USDT'
]

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏ ---
is_running = False
last_data = {symbol: {} for symbol in SYMBOLS}

# --- –¶–∏–∫–ª—ã-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –û–î–ù–û–ì–û —Å–∏–º–≤–æ–ª–∞ ---

async def single_trade_loop(exchange, symbol):
    """–°–ª–µ–¥–∏—Ç –∑–∞ —Å–¥–µ–ª–∫–∞–º–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞."""
    while is_running:
        try:
            trades = await exchange.watch_trades(symbol)
            for trade in trades:
                last_data[symbol]['last_price'] = trade['price']
                last_data[symbol]['last_side'] = trade['side']
        except Exception as e:
            print(f"Error in trade loop for {symbol}: {e}")
            last_data[symbol]['error'] = 'TradeFeed Down'
            await asyncio.sleep(10)

async def single_orderbook_loop(exchange, symbol):
    """–°–ª–µ–¥–∏—Ç –∑–∞ —Å—Ç–∞–∫–∞–Ω–æ–º –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å –≥–ª—É–±–∏–Ω–æ–π."""
    while is_running:
        try:
            orderbook = await exchange.watch_order_book(symbol, limit=20) # –ü–æ–ª—É—á–∞–µ–º 20 —É—Ä–æ–≤–Ω–µ–π
            last_data[symbol]['bids'] = orderbook['bids']
            last_data[symbol]['asks'] = orderbook['asks']
            if 'error' in last_data[symbol]:
                del last_data[symbol]['error']
        except Exception as e:
            print(f"Error in order book loop for {symbol}: {e}")
            last_data[symbol]['error'] = 'BookFeed Down'
            await asyncio.sleep(10)

# --- –ó–∞–¥–∞—á–∞-—Ä–µ–ø–æ—Ä—Ç–µ—Ä ---

async def telegram_reporter_loop(app, chat_ids):
    """–ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –≤ Telegram."""
    print("Telegram reporter loop started.")
    while is_running:
        await asyncio.sleep(30)
        report_lines = ["<b>üõ∞Ô∏è Data Feed Status: ACTIVE</b>"]
        for symbol in SYMBOLS:
            data = last_data.get(symbol, {})
            side_emoji = "üü¢" if data.get('last_side') == 'buy' else "üî¥" if data.get('last_side') == 'sell' else "‚ö™Ô∏è"
            
            if 'error' in data:
                 report_lines.append(f"<code>{symbol.split(':')[0]:<10}</code> ‚ö†Ô∏è {data['error']}")
            else:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª—É—á—à–∏–π bid/ask –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                best_bid = data.get('bids', [[None]])[0][0] if data.get('bids') else 'N/A'
                best_ask = data.get('asks', [[None]])[0][0] if data.get('asks') else 'N/A'
                report_lines.append(
                    f"<code>{symbol.split(':')[0]:<10}</code> {side_emoji} Bid: {best_bid} | Ask: {best_ask}"
                )
        
        message = "\n".join(report_lines)
        for cid in chat_ids:
            try:
                await app.bot.send_message(chat_id=cid, text=message, parse_mode=constants.ParseMode.HTML)
            except Exception as e:
                print(f"Failed to send message to {cid}: {e}")

# --- –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def data_feed_main_loop(app, chat_ids):
    global is_running
    is_running = True
    print("Data Feeder main loop initiated. Creating individual watchers...")

    exchange = ccxtpro.mexc({'options': {'defaultType': 'swap'}})
    
    tasks = []
    # –°–æ–∑–¥–∞–µ–º –ø–æ –¥–≤–µ –∑–∞–¥–∞—á–∏ (—Å–¥–µ–ª–∫–∏ + —Å—Ç–∞–∫–∞–Ω) –¥–ª—è –ö–ê–ñ–î–û–ì–û —Å–∏–º–≤–æ–ª–∞
    for symbol in SYMBOLS:
        tasks.append(single_trade_loop(exchange, symbol))
        tasks.append(single_orderbook_loop(exchange, symbol))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
    tasks.append(telegram_reporter_loop(app, chat_ids))

    try:
        await asyncio.gather(*tasks)
    except asyncio.CancelledError:
        print("Data feed main loop cancelled.")
    finally:
        await exchange.close()
        print("Exchange connection closed.")

def stop_data_feed():
    global is_running
    is_running = False
    print("Stop command received for data feeder.")
