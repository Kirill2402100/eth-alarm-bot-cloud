# File: data_feeder.py (v2 - Corrected)

import asyncio
import ccxt.pro as ccxtpro
from telegram import constants

# –ù–∞—à "–±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫" –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –§–∞–∑—ã 1
SYMBOLS = [
    'BTC/USDT:USDT', 'ETH/USDT:USDT', 'SOL/USDT:USDT',
    'WLD/USDT:USDT', 'ORDI/USDT:USDT', 'PEPE/USDT:USDT'
]

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏ ---
is_running = False
# –û–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É
last_data = {symbol: {} for symbol in SYMBOLS}

async def trades_loop(exchange):
    """–ó–∞–¥–∞—á–∞ ‚Ññ1: –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö."""
    print("Trade loop started.")
    while is_running:
        try:
            trades = await exchange.watch_trades_for_symbols(SYMBOLS)
            for trade in trades:
                symbol = trade['symbol']
                last_data[symbol]['last_price'] = trade['price']
                last_data[symbol]['last_side'] = trade['side']
        except Exception as e:
            print(f"Error in trades_loop: {e}")
            await asyncio.sleep(5)

async def orderbook_loop(exchange):
    """–ó–∞–¥–∞—á–∞ ‚Ññ2: –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞–∫–∞–Ω–µ."""
    print("Order book loop started.")
    while is_running:
        try:
            orderbook = await exchange.watch_order_book_for_symbols(SYMBOLS)
            symbol = orderbook['symbol']
            last_data[symbol]['best_bid'] = orderbook['bids'][0][0] if orderbook['bids'] else 'N/A'
            last_data[symbol]['best_ask'] = orderbook['asks'][0][0] if orderbook['asks'] else 'N/A'
        except Exception as e:
            print(f"Error in orderbook_loop: {e}")
            await asyncio.sleep(5)

async def telegram_reporter_loop(app, chat_ids):
    """–ó–∞–¥–∞—á–∞ ‚Ññ3: –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –≤ Telegram."""
    print("Telegram reporter loop started.")
    while is_running:
        await asyncio.sleep(30)
        report_lines = ["<b>üõ∞Ô∏è Data Feed Status: ACTIVE</b>"]
        for symbol, data in last_data.items():
            side_emoji = "üü¢" if data.get('last_side') == 'buy' else "üî¥" if data.get('last_side') == 'sell' else "‚ö™Ô∏è"
            report_lines.append(
                f"<code>{symbol.split(':')[0]:<10}</code> {side_emoji} Bid: {data.get('best_bid', 'N/A')} | Ask: {data.get('best_ask', 'N/A')}"
            )
        
        message = "\n".join(report_lines)
        for cid in chat_ids:
            try:
                await app.bot.send_message(chat_id=cid, text=message, parse_mode=constants.ParseMode.HTML)
            except Exception as e:
                print(f"Failed to send message to {cid}: {e}")

# --- –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def data_feed_main_loop(app, chat_ids):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –∑–∞–¥–∞—á–∞–º–∏.
    """
    global is_running
    is_running = True
    print("Data Feeder main loop initiated.")

    exchange = ccxtpro.mexc({'options': {'defaultType': 'swap'}})
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    try:
        await asyncio.gather(
            trades_loop(exchange),
            orderbook_loop(exchange),
            telegram_reporter_loop(app, chat_ids)
        )
    except asyncio.CancelledError:
        print("Data feed main loop cancelled.")
    finally:
        await exchange.close()
        print("Exchange connection closed.")

def stop_data_feed():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–∏–∫–ª–∞ –∏–∑–≤–Ω–µ."""
    global is_running
    is_running = False
    print("Stop command received for data feeder.")
