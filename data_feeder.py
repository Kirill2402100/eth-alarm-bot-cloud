# File: data_feeder.py

import asyncio
import ccxt.pro as ccxtpro
from telegram import constants

# –ù–∞—à "–±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫" –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –§–∞–∑—ã 1
SYMBOLS = [
    'BTC/USDT:USDT', 'ETH/USDT:USDT', 'SOL/USDT:USDT',
    'WLD/USDT:USDT', 'ORDI/USDT:USDT', 'PEPE/USDT:USDT'
]

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ü–∏–∫–ª–∞
is_running = False

async def data_feed_main_loop(app, chat_ids):
    """
    –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∏—Ä–∂–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ,
    –æ—Ç–ø—Ä–∞–≤–ª—è—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –≤ Telegram.
    """
    global is_running
    is_running = True
    print("Data Feeder loop started.")

    exchange = ccxtpro.mexc({'options': {'defaultType': 'swap'}})

    last_report_time = asyncio.get_event_loop().time()
    last_data = {symbol: {} for symbol in SYMBOLS}

    async def trade_handler(trade):
        # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        last_data[trade['symbol']]['last_price'] = trade['price']
        last_data[trade['symbol']]['last_side'] = trade['side']

    async def orderbook_handler(orderbook):
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–ø—Ä–æ—Å
        last_data[orderbook['symbol']]['best_bid'] = orderbook['bids'][0][0] if orderbook['bids'] else 'N/A'
        last_data[orderbook['symbol']]['best_ask'] = orderbook['asks'][0][0] if orderbook['asks'] else 'N/A'

    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    loops = [
        exchange.watch_trades_for_symbols(SYMBOLS, params={'unified': False}),
        exchange.watch_order_books_for_symbols(SYMBOLS)
    ]

    while is_running:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º gather –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –º–µ—Ä–µ –∏—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
            events = await asyncio.gather(*[asyncio.create_task(item) for item in loops], return_exceptions=True)
            for event in events:
                if isinstance(event, Exception):
                    continue # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                
                # Unified=False –≤ watch_trades_for_symbols –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫
                if isinstance(event, list):
                    for trade in event:
                       await trade_handler(trade)
                # watch_order_books_for_symbols –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω –æ—Ä–¥–µ—Ä–±—É–∫
                elif isinstance(event, dict) and 'bids' in event:
                    await orderbook_handler(event)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Telegram –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            current_time = asyncio.get_event_loop().time()
            if (current_time - last_report_time) > 30:
                report_lines = ["<b>üõ∞Ô∏è Data Feed Status: ACTIVE</b>"]
                for symbol, data in last_data.items():
                    side_emoji = "üü¢" if data.get('last_side') == 'buy' else "üî¥" if data.get('last_side') == 'sell' else "‚ö™Ô∏è"
                    report_lines.append(
                        f"<code>{symbol.split(':')[0]:<10}</code> {side_emoji} Bid: {data.get('best_bid', 'N/A')} | Ask: {data.get('best_ask', 'N/A')}"
                    )
                
                for cid in chat_ids:
                    await app.bot.send_message(chat_id=cid, text="\n".join(report_lines), parse_mode=constants.ParseMode.HTML)
                
                last_report_time = current_time

        except Exception as e:
            print(f"Critical error in data feed main loop: {e}")
            await asyncio.sleep(10) # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    
    await exchange.close()
    print("Data Feeder loop stopped and connection closed.")


def stop_data_feed():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–∏–∫–ª–∞ –∏–∑–≤–Ω–µ."""
    global is_running
    is_running = False
