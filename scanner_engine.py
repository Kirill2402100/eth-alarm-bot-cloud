# File: scanner_engine.py (v11 - Smart Focus Scanner)

import asyncio
import json
import pandas as pd
import pandas_ta as ta
import ccxt.async_support as ccxt
from data_feeder import last_data
from trade_executor import log_trade_to_sheet

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
LARGE_ORDER_USD = 50000 
TOP_N_ORDERS_TO_SEND = 10 # –ú–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç–µ
MAX_PORTFOLIO_SIZE = 10
MIN_RR_RATIO = 1.5

# --- –ü–†–û–ú–ü–¢ –î–õ–Ø LLM ---
LLM_PROMPT_MICROSTRUCTURE = """
–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫-–∫–≤–∞–Ω—Ç –≤ HFT-—Ñ–æ–Ω–¥–µ, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä—ã–Ω–∫–∞ (Order Flow, Market Making).

**–¢–í–û–Ø –ó–ê–î–ê–ß–ê:**
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ JSON-–¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∏—Ä–∂–µ–≤–æ–≥–æ —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è –û–î–ù–û–ô –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã. –î–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—é—Ç —Ç–æ–ø-10 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –ª–∏–º–∏—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫ ("–ø–ª–∏—Ç").

1.  **–û—Ü–µ–Ω–∏ —Å–µ—Ç–∞–ø.** –ù–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω –Ω–∞–¥–µ–∂–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏?
2.  **–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –∞–ª–≥–æ—Ä–∏—Ç–º–∞,** –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç —ç—Ç–∏ –ø–ª–∏—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Market-Maker", "Absorption Algorithm").
3.  **–ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω,** –µ—Å–ª–∏ —Å–µ—Ç–∞–ø –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–¥–µ–∂–µ–Ω.

**–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:**
–í–µ—Ä–Ω–∏ JSON-–æ–±—ä–µ–∫—Ç.

{
  "pair": "BTC/USDT",
  "confidence_score": 9,
  "algorithm_type": "Classic Market-Maker",
  "strategy_idea": "Range Trading (Long)",
  "reason": "–û—á–µ–Ω—å –ø–ª–æ—Ç–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä –±–∏–¥–æ–≤ –≤—ã—Å—Ç—É–ø–∞–µ—Ç —Å–∏–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ê—Å–∫–∏ —Ä–∞–∑—Ä–µ–∂–µ–Ω—ã. –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Å–∫–æ–∫–∞.",
  "entry_price": 119200.0,
  "sl_price": 119050.0,
  "tp_price": 119425.0
}

–ï—Å–ª–∏ —Å–µ—Ç–∞–ø –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏, –≤–µ—Ä–Ω–∏: {"confidence_score": 0}
"""

exchange = ccxt.mexc({'options': {'defaultType': 'swap'}})

async def get_entry_atr(pair):
    try:
        ohlcv = await exchange.fetch_ohlcv(pair, '15m', limit=20)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df.ta.atr(length=14, append=True)
        atr_value = df.iloc[-1]['ATR_14']
        return atr_value if pd.notna(atr_value) else 0
    except Exception as e:
        print(f"Could not fetch ATR for {pair}: {e}")
        return 0

async def scanner_main_loop(app, ask_llm_func, broadcast_func, trade_log_ws, state):
    print("Scanner Engine loop started (v_smart_focus).")
    last_llm_call_time = 0

    while True:
        try:
            await asyncio.sleep(15)

            active_pairs = {s['pair'] for s in state.get('monitored_signals', [])}
            if len(active_pairs) >= MAX_PORTFOLIO_SIZE:
                print(f"Portfolio is full ({len(active_pairs)}). Scanner is sleeping.")
                await asyncio.sleep(30)
                continue

            market_anomalies = {}
            current_data_snapshot = dict(last_data)

            for symbol, data in current_data_snapshot.items():
                pair_name = symbol.split(':')[0]
                if not data or not data.get('bids') or not data.get('asks') or pair_name in active_pairs:
                    continue

                large_bids = [{'price': p, 'value_usd': round(p*a)} for p, a in data.get('bids', []) if p and a and (p*a > LARGE_ORDER_USD)]
                large_asks = [{'price': p, 'value_usd': round(p*a)} for p, a in data.get('asks', []) if p and a and (p*a > LARGE_ORDER_USD)]
                
                if large_bids or large_asks:
                    market_anomalies[pair_name] = {'bids': large_bids, 'asks': large_asks}

            current_time = asyncio.get_event_loop().time()
            if (current_time - last_llm_call_time) > 45 and market_anomalies:
                last_llm_call_time = current_time
                
                # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –í–´–ë–û–† –õ–£–ß–®–ï–ì–û –ö–ê–ù–î–ò–î–ê–¢–ê –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô ---
                best_candidate_pair = None
                max_order_value = 0
                for pair, anomalies in market_anomalies.items():
                    all_orders = anomalies['bids'] + anomalies['asks']
                    if not all_orders: continue
                    current_max = max(order['value_usd'] for order in all_orders)
                    if current_max > max_order_value:
                        max_order_value = current_max
                        best_candidate_pair = pair
                
                if not best_candidate_pair: continue

                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                best_candidate_data = market_anomalies[best_candidate_pair]
                top_bids = sorted(best_candidate_data['bids'], key=lambda x: x['value_usd'], reverse=True)[:TOP_N_ORDERS_TO_SEND]
                top_asks = sorted(best_candidate_data['asks'], key=lambda x: x['value_usd'], reverse=True)[:TOP_N_ORDERS_TO_SEND]
                
                focused_data = {best_candidate_pair: {'bids': top_bids, 'asks': top_asks}}
                prompt_data = json.dumps(focused_data, indent=2)
                # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

                full_prompt = LLM_PROMPT_MICROSTRUCTURE + "\n\n–ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú–´–ï –î–ê–ù–ù–´–ï:\n" + prompt_data
                await broadcast_func(app, f"üß† –°–∫–∞–Ω–µ—Ä –≤—ã–±—Ä–∞–ª –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ ({best_candidate_pair}). –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –∞–Ω–∞–ª–∏–∑ LLM...")
                
                llm_response_content = await ask_llm_func(full_prompt)
                
                if llm_response_content:
                    # ... (–≤—Å—è –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ LLM –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                    try:
                        cleaned_response = llm_response_content.strip().strip('```json').strip('```').strip()
                        decision = json.loads(cleaned_response)
                        # ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ
                    except Exception as e:
                        print(f"Error parsing LLM decision: {e}")

        except asyncio.CancelledError:
            print("Scanner Engine loop cancelled.")
            break
        except Exception as e:
            print(f"Error in Scanner Engine loop: {e}")
            await asyncio.sleep(10)
