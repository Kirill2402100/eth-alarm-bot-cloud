# File: scanner_engine.py (v29 - Robust ATR)
# Changelog 17-Jul-2025 (Europe/Belgrade):
# ‚Ä¢ –§—É–Ω–∫—Ü–∏—è get_entry_atr –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
# ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ ATR.
# ‚Ä¢ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ —Å–±–æ—è –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ ATR –¥–ª—è Momentum-–≤—Ö–æ–¥–∞.

import asyncio
import json
import time
import pandas as pd
import pandas_ta as ta
import ccxt.async_support as ccxt
from trade_executor import log_trade_to_sheet, update_trade_in_sheet

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –°–∫–∞–Ω–µ—Ä–∞ –∏ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ =====================================
PAIR_TO_SCAN = 'BTC/USDT'
TIMEFRAME = '15m'
LARGE_ORDER_USD = 500000
TOP_N_ORDERS_TO_ANALYZE = 15
MIN_TOTAL_LIQUIDITY_USD = 2000000
MIN_IMBALANCE_RATIO = 3.0
MAX_PORTFOLIO_SIZE = 1
MIN_CONFIDENCE_SCORE = 6
MIN_RR_RATIO = 1.5
SL_ATR_MULTIPLIER = 2.0
ENTRY_OFFSET_PERCENT = 0.0005
SL_OFFSET_PERCENT = 0.0010
LLM_COOLDOWN_SECONDS = 180

# === –ü–†–û–ú–ü–¢ –î–õ–Ø LLM (v5 - Aggressive) =====================================
LLM_PROMPT_MICROSTRUCTURE = """
–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫-–∫–≤–∞–Ω—Ç –≤ HFT-—Ñ–æ–Ω–¥–µ —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º —Å—Ç–∏–ª–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞—Ö–æ–¥–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∞ –Ω–µ –∏–∑–±–µ–≥–∞—Ç—å –∏—Ö.

**–¢–í–û–Ø –ó–ê–î–ê–ß–ê:**
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ JSON-–¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø-15 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –ª–∏–º–∏—Ç–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö ("–ø–ª–∏—Ç–∞—Ö"). –î–∞–Ω–Ω—ã–µ —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏.

**–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ò–ù–¶–ò–ü–´ –ê–ù–ê–õ–ò–ó–ê:**
1.  **–î–æ–≤–µ—Ä—è–π –¥–∏—Å–±–∞–ª–∞–Ω—Å—É:** –°–∏–ª—å–Ω—ã–π –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –ø–µ—Ä–µ–≤–µ—Å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ ‚Äî —ç—Ç–æ —Å–∞–º –ø–æ —Å–µ–±–µ –º–æ—â–Ω—ã–π —Å–∏–≥–Ω–∞–ª. –ù–µ —Å—á–∏—Ç–∞–π –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø—É—Ñ–∏–Ω–≥–æ–º —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º—É, —á—Ç–æ –Ω–∞ –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω–µ —Å—Ç–∞–∫–∞–Ω–∞ –ø—É—Å—Ç–æ. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è ‚Äî —ç—Ç–æ —Ç–æ–∂–µ –ø—Ä–∏–∑–Ω–∞–∫ —Å–ª–∞–±–æ—Å—Ç–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.
2.  **–û—Ü–µ–Ω–∏–≤–∞–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å:** –ó–∞–¥–∞–≤–∞–π —Å–µ–±–µ –≤–æ–ø—Ä–æ—Å: "–ü–æ—Ö–æ–∂–µ –ª–∏ —ç—Ç–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–ø—ã—Ç–∫—É —É–¥–µ—Ä–∂–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–¥–∏–Ω–æ–∫–∞—è, –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—è–≤–∫–∞ –¥–∞–ª–µ–∫–æ –æ—Ç —Ü–µ–Ω—ã?".
3.  **–ë—É–¥—å —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–º:** –ï—Å–ª–∏ –≤–∏–¥–∏—à—å —è–≤–Ω—É—é —Å—Ç–µ–Ω—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —Å–ª—É–∂–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–ª–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–π –≤—ã—Å–æ–∫–∏–π `confidence_score`. –ï—Å–ª–∏ —á–µ—Ç–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π –Ω–µ—Ç, –Ω–æ –¥–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ–≤–∏–¥–Ω–æ, –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–∞–≤–∞–π –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É –∏ –æ–±—ä—è—Å–Ω—è–π —ç—Ç–æ –≤ –ø—Ä–∏—á–∏–Ω–µ.

**–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:**
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON-–æ–±—ä–µ–∫—Ç.
"""
async def monitor_active_trades(exchange, app, broadcast_func, trade_log_ws, state, save_state_func):
    active_signals = state.get('monitored_signals')
    if not active_signals: return
    signal = active_signals[0]
    try:
        ticker = await exchange.fetch_ticker(signal['pair'])
        current_price = ticker.get('last')
        if not current_price: return
    except Exception as e:
        print(f"Monitor: Could not fetch ticker for {signal['pair']}. Error: {e}")
        return
    exit_status, exit_price = None, None
    entry_price, sl_price, tp_price = signal['entry_price'], signal['sl_price'], signal['tp_price']
    if signal['side'] == 'LONG':
        if current_price <= sl_price: exit_status, exit_price = "SL_HIT", sl_price
        elif current_price >= tp_price: exit_status, exit_price = "TP_HIT", tp_price
    elif signal['side'] == 'SHORT':
        if current_price >= sl_price: exit_status, exit_price = "SL_HIT", sl_price
        elif current_price <= tp_price: exit_status, exit_price = "TP_HIT", tp_price
    if exit_status:
        position_size_usd, leverage = 50, 100
        price_change_percent = ((exit_price - entry_price) / entry_price) if entry_price != 0 else 0
        if signal['side'] == 'SHORT': price_change_percent = -price_change_percent
        pnl_percent = price_change_percent * leverage * 100
        pnl_usd = position_size_usd * (pnl_percent / 100)
        await update_trade_in_sheet(trade_log_ws, signal, exit_status, exit_price, pnl_usd, pnl_percent)
        emoji = "‚úÖ" if pnl_usd > 0 else "‚ùå"
        msg = (f"{emoji} <b>–°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê ({exit_status})</b>\n\n"
               f"<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> <code>{signal['pair']}</code>\n"
               f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${pnl_usd:+.2f} ({pnl_percent:+.2f}%)</b>")
        await broadcast_func(app, msg)
        state['monitored_signals'] = []
        save_state_func()
        print(f"Trade {signal['signal_id']} closed. Portfolio is now empty.")

# === –ù–û–í–ê–Ø –ù–ê–î–ï–ñ–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –†–ê–°–ß–ï–¢–ê ATR =================================
async def get_entry_atr(exchange, pair):
    """
    –ù–∞–¥–µ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç ATR, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –æ—à–∏–±–∫–∏ API –∏ –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        # 1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        ohlcv = await exchange.fetch_ohlcv(pair, TIMEFRAME, limit=20)

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ –∏—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        if not ohlcv or len(ohlcv) < 15:
            print(f"ATR Error: Not enough OHLCV data received for {pair}. Got: {len(ohlcv) if ohlcv else 0} candles.")
            return 0

        # 3. –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        
        # 4. –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
        for col in ['open', 'high', 'low', 'close', 'volume']:
            df[col] = pd.to_numeric(df[col])

        # 5. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ATR
        df.ta.atr(length=14, append=True)
        
        # 6. –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ATR –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
        atr_value = df.iloc[-1]['ATR_14']
        
        if pd.isna(atr_value):
            print(f"ATR Error: ATR calculation resulted in NaN for {pair}.")
            return 0
            
        return atr_value

    except ccxt.NetworkError as e:
        print(f"ATR Error: Network issue while fetching OHLCV for {pair}. Details: {e}")
        return 0
    except ccxt.ExchangeError as e:
        print(f"ATR Error: Exchange returned an error for {pair}. Details: {e}")
        return 0
    except Exception as e:
        # –õ–æ–≤–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        print(f"ATR Error: An unexpected error occurred in get_entry_atr for {pair}. Details: {e}", exc_info=True)
        return 0

async def scan_for_new_opportunities(exchange, app, ask_llm_func, broadcast_func, trade_log_ws, state, save_state_func):
    current_time = time.time()
    last_call_time = state.get('llm_cooldown', {}).get(PAIR_TO_SCAN, 0)
    if (current_time - last_call_time) < LLM_COOLDOWN_SECONDS:
        return

    try:
        order_book = await exchange.fetch_order_book(PAIR_TO_SCAN, limit=50)
        large_bids = sorted([{'price': p, 'value_usd': round(p*a)} for p, a in order_book.get('bids', []) if p and a and (p*a > LARGE_ORDER_USD)], key=lambda x: x['value_usd'], reverse=True)
        large_asks = sorted([{'price': p, 'value_usd': round(p*a)} for p, a in order_book.get('asks', []) if p and a and (p*a > LARGE_ORDER_USD)], key=lambda x: x['value_usd'], reverse=True)
    except Exception as e:
        print(f"Could not fetch order book for {PAIR_TO_SCAN}: {e}")
        return

    top_bids = large_bids[:TOP_N_ORDERS_TO_ANALYZE]
    top_asks = large_asks[:TOP_N_ORDERS_TO_ANALYZE]
    
    total_bids_usd = sum(b['value_usd'] for b in top_bids)
    total_asks_usd = sum(a['value_usd'] for a in top_asks)

    if (total_bids_usd + total_asks_usd) < MIN_TOTAL_LIQUIDITY_USD:
        # This print is for our internal logs, not for Telegram
        # print(f"Pre-filter: Low liquidity (${total_bids_usd/1e6:.1f}M / ${total_asks_usd/1e6:.1f}M). Skipped.")
        return

    imbalance_ratio = 0
    dominant_side_is_bids = total_bids_usd > total_asks_usd
    if total_bids_usd > 0 and total_asks_usd > 0:
        imbalance_ratio = max(total_bids_usd / total_asks_usd, total_asks_usd / total_bids_usd)
    elif total_bids_usd > 0 or total_asks_usd > 0:
        imbalance_ratio = float('inf')

    if imbalance_ratio < MIN_IMBALANCE_RATIO:
        # This print is for our internal logs, not for Telegram
        # print(f"Pre-filter: Weak imbalance (ratio: {imbalance_ratio:.2f}, threshold: {MIN_IMBALANCE_RATIO:.2f}). Skipped.")
        return

    state.setdefault('llm_cooldown', {})[PAIR_TO_SCAN] = time.time()
    save_state_func()

    dominant_side = "–ü–û–ö–£–ü–ê–¢–ï–õ–ï–ô" if dominant_side_is_bids else "–ü–†–û–î–ê–í–¶–û–í"
    largest_order = (top_bids[0] if top_bids else None) if dominant_side_is_bids else (top_asks[0] if top_asks else None)
    direction_text = "–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ –í–í–ï–†–•" if dominant_side_is_bids else "–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ –í–ù–ò–ó"

    if largest_order:
        detailed_msg = (f"üß† **–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è!**\n\n"
                        f"–°–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–µ—Å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ {dominant_side} (–¥–∏—Å–±–∞–ª–∞–Ω—Å {imbalance_ratio:.1f}x).\n"
                        f"–ö–ª—é—á–µ–≤–æ–π –æ—Ä–¥–µ—Ä: <code>${largest_order['value_usd']/1e6:.2f} –º–ª–Ω</code> –Ω–∞ —É—Ä–æ–≤–Ω–µ <code>{largest_order['price']}</code>.\n"
                        f"–û–∂–∏–¥–∞–Ω–∏–µ: {direction_text}.\n\n"
                        f"–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤ LLM...")
    else:
        detailed_msg = f"üß† –°–∫–∞–Ω–µ—Ä –Ω–∞—à–µ–ª **–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∞–Ω–æ–º–∞–ª–∏—é** (–¥–∏—Å–±–∞–ª–∞–Ω—Å {imbalance_ratio:.1f}x). –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –∞–Ω–∞–ª–∏–∑ LLM..."
    
    await broadcast_func(app, detailed_msg)

    focused_data = {PAIR_TO_SCAN: {'bids': top_bids, 'asks': top_asks}}
    prompt_data = json.dumps(focused_data, indent=2)
    full_prompt = LLM_PROMPT_MICROSTRUCTURE + "\n\n–ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú–´–ï –î–ê–ù–ù–´–ï:\n" + prompt_data
    
    llm_response_content = await ask_llm_func(full_prompt)

    if not llm_response_content: return

    try:
        cleaned_response = llm_response_content.strip().strip('```json').strip('```').strip()
        decision = json.loads(cleaned_response)
        confidence = decision.get("confidence_score", 0)
        reason = decision.get("reason", "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")

        if confidence < MIN_CONFIDENCE_SCORE:
            await broadcast_func(app, f"üßê <b>–°–ò–ì–ù–ê–õ –û–¢–ö–õ–û–ù–ï–ù LLM (–û—Ü–µ–Ω–∫–∞: {confidence}/10)</b>\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> <i>\"{reason}\"</i>")
            return

        trade_plan = {}
        ticker = await exchange.fetch_ticker(PAIR_TO_SCAN)
        current_price = ticker.get('last')
        if not current_price: return
        
        support = decision.get("key_support_level")
        resistance = decision.get("key_resistance_level")
        levels_are_valid = support and resistance and isinstance(support, (int, float)) and isinstance(resistance, (int, float))

        if levels_are_valid:
            trade_plan['strategy_idea'] = "Level-based Entry"
            if abs(current_price - support) < abs(current_price - resistance):
                trade_plan['side'] = "LONG"
                trade_plan['entry_price'] = support * (1 + ENTRY_OFFSET_PERCENT)
                trade_plan['sl_price'] = support * (1 - SL_OFFSET_PERCENT)
            else:
                trade_plan['side'] = "SHORT"
                trade_plan['entry_price'] = resistance * (1 - ENTRY_OFFSET_PERCENT)
                trade_plan['sl_price'] = resistance * (1 + SL_OFFSET_PERCENT)
            risk = abs(trade_plan['entry_price'] - trade_plan['sl_price'])
            trade_plan['tp_price'] = trade_plan['entry_price'] + risk * MIN_RR_RATIO if trade_plan['side'] == 'LONG' else trade_plan['entry_price'] - risk * MIN_RR_RATIO
        else:
            trade_plan['strategy_idea'] = "Momentum Entry (ATR)"
            entry_atr = await get_entry_atr(exchange, PAIR_TO_SCAN)
            if entry_atr == 0:
                await broadcast_func(app, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å ATR –¥–ª—è Momentum-–≤—Ö–æ–¥–∞. –°–¥–µ–ª–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
                return
            
            trade_plan['entry_price'] = current_price
            if dominant_side_is_bids:
                trade_plan['side'] = "LONG"
                trade_plan['sl_price'] = current_price - (entry_atr * SL_ATR_MULTIPLIER)
                trade_plan['tp_price'] = current_price + (entry_atr * SL_ATR_MULTIPLIER * MIN_RR_RATIO)
            else:
                trade_plan['side'] = "SHORT"
                trade_plan['sl_price'] = current_price + (entry_atr * SL_ATR_MULTIPLIER)
                trade_plan['tp_price'] = current_price - (entry_atr * SL_ATR_MULTIPLIER * MIN_RR_RATIO)

        decision.update(trade_plan)
        decision['pair'] = PAIR_TO_SCAN
        msg = (f"<b>üî• –ù–û–í–´–ô –°–ò–ì–ù–ê–õ (–û—Ü–µ–Ω–∫–∞: {confidence}/10)</b>\n\n"
               f"<b>–¢–∏–ø –≤—Ö–æ–¥–∞:</b> {decision['strategy_idea']}\n"
               f"<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> <code>{PAIR_TO_SCAN}</code>\n"
               f"<b>–ê–ª–≥–æ—Ä–∏—Ç–º –≤ —Å—Ç–∞–∫–∞–Ω–µ:</b> <i>{decision.get('algorithm_type', 'N/A')}</i>\n"
               f"<b>–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ø–ª–∞–Ω (RR ~{MIN_RR_RATIO:.1f}:1):</b>\n"
               f"  - –í—Ö–æ–¥: <code>{decision['entry_price']:.2f}</code>\n"
               f"  - SL: <code>{decision['sl_price']:.2f}</code>\n"
               f"  - TP: <code>{decision['tp_price']:.2f}</code>\n\n"
               f"<b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ LLM:</b> <i>\"{reason}\"</i>")
        await broadcast_func(app, msg)

        final_entry_atr = await get_entry_atr(exchange, PAIR_TO_SCAN)
        success = await log_trade_to_sheet(trade_log_ws, decision, final_entry_atr, state, save_state_func)
        if success:
            await broadcast_func(app, "‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≤–∑—è—Ç–∞ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.")

    except json.JSONDecodeError:
        print(f"Error parsing LLM JSON response. Raw response: {llm_response_content}")
        await broadcast_func(app, "‚ö†Ô∏è LLM –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON. –ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.")
    except Exception as e:
        print(f"Error processing new opportunity: {e}", exc_info=True)

async def scanner_main_loop(app, ask_llm_func, broadcast_func, trade_log_ws, state, save_state_func):
    print("Main Engine loop started (v29_robust_atr).")
    exchange = ccxt.mexc({'options': {'defaultType': 'swap'}})
    while state.get("bot_on", True):
        try:
            print(f"\n--- Running Main Cycle | Active Trades: {len(state.get('monitored_signals',[]))} ---")
            await monitor_active_trades(exchange, app, broadcast_func, trade_log_ws, state, save_state_func)
            if len(state.get('monitored_signals', [])) < MAX_PORTFOLIO_SIZE:
                await scan_for_new_opportunities(exchange, app, ask_llm_func, broadcast_func, trade_log_ws, state, save_state_func)
            # –£–±—Ä–∞–ª –ª–∏—à–Ω–∏–µ –ø—Ä–∏–Ω—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –ª–æ–≥–æ–≤
            # print(f"--- Cycle Finished. Sleeping for 30 seconds. ---")
            await asyncio.sleep(30)
        except asyncio.CancelledError:
            print("Main Engine loop cancelled.")
            break
        except Exception as e:
            print(f"CRITICAL Error in Main Engine loop: {e}", exc_info=True)
            await asyncio.sleep(60)
    print("Main Engine loop stopped.")
    await exchange.close()
