# File: scanner_engine.py (v18 - Final REST-only Architecture)

import asyncio
import json
import time
import pandas as pd
import pandas_ta as ta
import ccxt.async_support as ccxt
from trade_executor import log_trade_to_sheet, update_trade_in_sheet

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
PAIR_TO_SCAN = 'BTC/USDT'
LARGE_ORDER_USD = 500000 
TOP_N_ORDERS_TO_SEND = 15
MAX_PORTFOLIO_SIZE = 1
MIN_RR_RATIO = 1.5
LLM_COOLDOWN_SECONDS = 180

# --- –ü–†–û–ú–ü–¢ –î–õ–Ø LLM ---
LLM_PROMPT_MICROSTRUCTURE = """
–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫-–∫–≤–∞–Ω—Ç –≤ HFT-—Ñ–æ–Ω–¥–µ, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä—ã–Ω–∫–∞ BTC/USDT.

**–¢–í–û–Ø –ó–ê–î–ê–ß–ê:**
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ JSON-–¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∏—Ä–∂–µ–≤–æ–≥–æ —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è BTC/USDT. –î–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—é—Ç —Ç–æ–ø-15 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –ª–∏–º–∏—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫ ("–ø–ª–∏—Ç").

1.  **–û—Ü–µ–Ω–∏ —Ç–µ–∫—É—â–∏–π —Å–µ—Ç–∞–ø:** –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –Ω–∞–¥–µ–∂–Ω—ã–º –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?
2.  **–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –∞–ª–≥–æ—Ä–∏—Ç–º–∞,** –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç —ç—Ç–∏ –ø–ª–∏—Ç—ã. –í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã:
    * **Classic Market-Maker:** –î–≤–µ —á–µ—Ç–∫–∏–µ "—Å—Ç–µ–Ω—ã" –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É, —Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–µ –∫–æ—Ä–∏–¥–æ—Ä. –°—Ç—Ä–∞—Ç–µ–≥–∏—è: Range Trading.
    * **Absorption Algorithm:** –û–¥–Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ –∫—Ä—É–ø–Ω–∞—è —Å—Ç–µ–Ω–∞ (–Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É), –∫–æ—Ç–æ—Ä–∞—è "–≤–ø–∏—Ç—ã–≤–∞–µ—Ç" –≤—Å–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞. –°—Ç—Ä–∞—Ç–µ–≥–∏—è: Trade from Support/Resistance.
    * **Spoofing:** –ö—Ä—É–ø–Ω–∞—è –∑–∞—è–≤–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∏—Å—á–µ–∑–∞–µ—Ç –ø—Ä–∏ –ø–æ–¥—Ö–æ–¥–µ —Ü–µ–Ω—ã. –°—Ç—Ä–∞—Ç–µ–≥–∏—è: No Trade –∏–ª–∏ Fade (—Ç–æ—Ä–≥–æ–≤–ª—è –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É).
3.  **–ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω** (entry, sl, tp) —Å —É—á–µ—Ç–æ–º —Ç—Ä–µ–±—É–µ–º–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

**–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:**
–í–µ—Ä–Ω–∏ JSON-–æ–±—ä–µ–∫—Ç.

{
  "pair": "BTC/USDT",
  "confidence_score": 9,
  "algorithm_type": "Classic Market-Maker",
  "strategy_idea": "Range Trading (Long)",
  "reason": "–û—á–µ–Ω—å –ø–ª–æ—Ç–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä –±–∏–¥–æ–≤ –≤—ã—Å—Ç—É–ø–∞–µ—Ç —Å–∏–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ê—Å–∫–∏ —Ä–∞–∑—Ä–µ–∂–µ–Ω—ã. –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Å–∫–æ–∫–∞.",
  "entry_price": 119200.0,
  "sl_price": 119050.0,
  "tp_price": 119425.0
}

–ï—Å–ª–∏ —Å–µ—Ç–∞–ø –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏, –≤–µ—Ä–Ω–∏: {"confidence_score": 0}
"""

exchange = ccxt.mexc({'options': {'defaultType': 'swap'}})

# --- –ú–û–î–£–õ–¨ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ---
async def monitor_active_trades(app, broadcast_func, trade_log_ws, state, save_state_func):
    active_signals = state.get('monitored_signals')
    if not active_signals: return
    
    signal = active_signals[0] # –¢–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –≤—Å–µ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å–¥–µ–ª–∫–∞
    try:
        ticker = await exchange.fetch_ticker(signal['pair'])
        current_price = ticker.get('last')
        if not current_price: return
    except Exception as e:
        print(f"Monitor: Could not fetch ticker for {signal['pair']}. Error: {e}")
        return

    exit_status, exit_price = None, None
    entry_price, sl_price, tp_price = signal['entry_price'], signal['sl_price'], signal['tp_price']

    if signal['side'] == 'LONG':
        if current_price <= sl_price: exit_status, exit_price = "SL_HIT", sl_price
        elif current_price >= tp_price: exit_status, exit_price = "TP_HIT", tp_price
    elif signal['side'] == 'SHORT':
        if current_price >= sl_price: exit_status, exit_price = "SL_HIT", sl_price
        elif current_price <= tp_price: exit_status, exit_price = "TP_HIT", tp_price

    if exit_status:
        position_size_usd, leverage = 50, 100
        price_change_percent = ((exit_price - entry_price) / entry_price) if entry_price != 0 else 0
        if signal['side'] == 'SHORT': price_change_percent = -price_change_percent
        pnl_percent = price_change_percent * leverage * 100
        pnl_usd = position_size_usd * (pnl_percent / 100)
        
        await update_trade_in_sheet(trade_log_ws, signal, exit_status, exit_price, pnl_usd, pnl_percent)
        
        emoji = "‚úÖ" if pnl_usd > 0 else "‚ùå"
        msg = (f"{emoji} <b>–°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê ({exit_status})</b>\n\n"
               f"<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> <code>{signal['pair']}</code>\n"
               f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${pnl_usd:+.2f} ({pnl_percent:+.2f}%)</b>")
        await broadcast_func(app, msg)
        
        state['monitored_signals'] = []
        save_state_func()

# --- –ú–û–î–£–õ–¨ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø ---
async def get_entry_atr(pair):
    try:
        ohlcv = await exchange.fetch_ohlcv(pair, '15m', limit=20)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df.ta.atr(length=14, append=True)
        atr_value = df.iloc[-1]['ATR_14']
        return atr_value if pd.notna(atr_value) else 0
    except Exception: return 0

async def scan_for_new_opportunities(app, ask_llm_func, broadcast_func, trade_log_ws, state):
    current_time = time.time()
    last_call_time = state.get('llm_cooldown', {}).get(PAIR_TO_SCAN, 0)
    if (current_time - last_call_time) < LLM_COOLDOWN_SECONDS:
        return

    print(f"Scanning for anomalies in {PAIR_TO_SCAN}...")
    try:
        order_book = await exchange.fetch_order_book(PAIR_TO_SCAN, limit=25)
        large_bids = [{'price': p, 'value_usd': round(p*a)} for p, a in order_book.get('bids', []) if p and a and (p*a > LARGE_ORDER_USD)]
        large_asks = [{'price': p, 'value_usd': round(p*a)} for p, a in order_book.get('asks', []) if p and a and (p*a > LARGE_ORDER_USD)]
        if not (large_bids or large_asks):
            print("No large orders found.")
            return
    except Exception as e:
        print(f"Could not fetch order book for {PAIR_TO_SCAN}: {e}")
        return

    state['llm_cooldown'][PAIR_TO_SCAN] = time.time()
    
    top_bids = sorted(large_bids, key=lambda x: x['value_usd'], reverse=True)[:TOP_N_ORDERS_TO_SEND]
    top_asks = sorted(large_asks, key=lambda x: x['value_usd'], reverse=True)[:TOP_N_ORDERS_TO_SEND]
    focused_data = {PAIR_TO_SCAN: {'bids': top_bids, 'asks': top_asks}}
    prompt_data = json.dumps(focused_data, indent=2)
    full_prompt = LLM_PROMPT_MICROSTRUCTURE + "\n\n–ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú–´–ï –î–ê–ù–ù–´–ï:\n" + prompt_data
    
    await broadcast_func(app, f"üß† –°–∫–∞–Ω–µ—Ä –Ω–∞—à–µ–ª –∞–Ω–æ–º–∞–ª–∏–∏ –Ω–∞ {PAIR_TO_SCAN}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –∞–Ω–∞–ª–∏–∑ LLM...")
    llm_response_content = await ask_llm_func(full_prompt)
    
    if llm_response_content:
        try:
            cleaned_response = llm_response_content.strip().strip('```json').strip('```').strip()
            decision = json.loads(cleaned_response)

            if decision and decision.get("confidence_score", 0) >= 7:
                entry, sl, tp = decision.get("entry_price"), decision.get("sl_price"), decision.get("tp_price")
                if not all(isinstance(v, (int, float)) for v in [entry, sl, tp]) or abs(entry - sl) == 0:
                    return
                
                rr_ratio = abs(tp - entry) / abs(entry - sl)
                if rr_ratio < MIN_RR_RATIO:
                    await broadcast_func(app, f"‚ö†Ô∏è LLM –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–¥–µ–ª–∫—É —Å –Ω–∏–∑–∫–∏–º RR ({rr_ratio:.2f}:1). –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
                    return
                
                msg = (f"<b>üî• LLM –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø (RR {rr_ratio:.2f}:1, –û—Ü–µ–Ω–∫–∞: {decision['confidence_score']}/10)</b>\n\n"
                       f"<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> <code>{decision['pair']}</code>\n"
                       f"<b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {decision['strategy_idea']}\n"
                       f"<b>–ê–ª–≥–æ—Ä–∏—Ç–º:</b> <i>{decision['algorithm_type']}</i>\n"
                       f"<b>–ü–ª–∞–Ω:</b>\n"
                       f"  - –í—Ö–æ–¥: <code>{entry}</code>\n"
                       f"  - SL: <code>{sl}</code>\n"
                       f"  - TP: <code>{tp}</code>\n\n"
                       f"<b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b> <i>\"{decision['reason']}\"</i>")
                await broadcast_func(app, msg)
                
                entry_atr = await get_entry_atr(decision.get("pair"))
                success = await log_trade_to_sheet(trade_log_ws, decision, entry_atr)
                if success:
                    await broadcast_func(app, "‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞.")
        except Exception as e:
            print(f"Error parsing LLM decision: {e}")

# --- –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ ---
async def scanner_main_loop(app, ask_llm_func, broadcast_func, trade_log_ws, state, save_state_func):
    print("Main Engine loop started (v_rest_final).")
    while state.get("bot_on", True):
        try:
            print(f"\n--- Running Main Cycle | Active Trades: {len(state.get('monitored_signals',[]))} ---")
            await monitor_active_trades(app, broadcast_func, trade_log_ws, state, save_state_func)
            
            if len(state.get('monitored_signals', [])) < MAX_PORTFOLIO_SIZE:
                await scan_for_new_opportunities(app, ask_llm_func, broadcast_func, trade_log_ws, state)
            
            print("--- Cycle Finished. Sleeping for 30 seconds. ---")
            await asyncio.sleep(30)
        except asyncio.CancelledError:
            print("Main Engine loop cancelled.")
            break
        except Exception as e:
            print(f"Error in Main Engine loop: {e}")
            await asyncio.sleep(60)
    print("Main Engine loop stopped.")
    await exchange.close()
