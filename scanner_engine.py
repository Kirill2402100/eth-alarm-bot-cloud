import asyncio
import pandas as pd
import ccxt.async_support as ccxt
from trade_executor import log_trade_to_sheet, update_trade_in_sheet
import time
from datetime import datetime, timezone

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
PAIR_TO_SCAN = 'BTC/USDT'
LARGE_ORDER_USD = 500000
TOP_N_ORDERS_TO_ANALYZE = 15
MIN_TOTAL_LIQUIDITY_USD = 2000000
MIN_IMBALANCE_RATIO = 3.0
MAX_PORTFOLIO_SIZE = 1
TP_PERCENT = 0.0015
SL_PERCENT = 0.0010
COUNTER_ORDER_RATIO = 1.25

async def monitor_active_trades(exchange, app, broadcast_func, trade_log_ws, state, save_state_func):
    active_signals = state.get('monitored_signals')
    if not active_signals: return
    signal = active_signals[0]
    try:
        ohlcv = await exchange.fetch_ohlcv(signal['Pair'], timeframe='1m', limit=1)
        if not ohlcv: return

        current_candle = ohlcv[0]
        candle_high = float(current_candle[2])
        candle_low = float(current_candle[3])
        exit_status, exit_price = None, None
        entry_price, sl_price, tp_price = signal['Entry_Price'], signal['SL_Price'], signal['TP_Price']
        
        if signal['side'] == 'LONG':
            if candle_low <= sl_price: exit_status, exit_price = "SL_HIT", sl_price
            elif candle_high >= tp_price: exit_status, exit_price = "TP_HIT", tp_price
        elif signal['side'] == 'SHORT':
            if candle_high >= sl_price: exit_status, exit_price = "SL_HIT", sl_price
            elif candle_low <= tp_price: exit_status, exit_price = "TP_HIT", tp_price
        
        if not exit_status:
            trigger_order_usd = signal.get('Trigger_Order_USD', 0)
            if trigger_order_usd > 0:
                order_book = await exchange.fetch_order_book(signal['Pair'], limit=25)
                current_price = float(current_candle[4])
                if signal['side'] == 'LONG' and any((p*a) > (trigger_order_usd * COUNTER_ORDER_RATIO) for p, a in order_book.get('asks', [])):
                    exit_status, exit_price = "EMERGENCY_EXIT", current_price
                elif signal['side'] == 'SHORT' and any((p*a) > (trigger_order_usd * COUNTER_ORDER_RATIO) for p, a in order_book.get('bids', [])):
                    exit_status, exit_price = "EMERGENCY_EXIT", current_price

        if exit_status:
            pnl_percent = (((exit_price - entry_price) / entry_price if entry_price != 0 else 0) * (-1 if signal['side'] == 'SHORT' else 1) * 100 * 100)
            pnl_usd = 50 * (pnl_percent / 100)
            await update_trade_in_sheet(trade_log_ws, signal, exit_status, exit_price, pnl_usd, pnl_percent)
            emoji = "‚ö†Ô∏è" if exit_status == "EMERGENCY_EXIT" else ("‚úÖ" if pnl_usd > 0 else "‚ùå")
            msg = (f"{emoji} <b>–°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê ({exit_status})</b>\n\n"
                   f"<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> <code>{signal['Pair']}</code>\n"
                   f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${pnl_usd:+.2f} ({pnl_percent:+.2f}%)</b>")
            await broadcast_func(app, msg)
            state['monitored_signals'] = []
            save_state_func()

    except Exception as e:
        error_message = f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–¥–µ–ª–∫–∏!</b>\n<code>–û—à–∏–±–∫–∞: {e}</code>"
        print(f"CRITICAL MONITORING ERROR: {e}", exc_info=True)
        await broadcast_func(app, error_message)

async def scan_for_new_opportunities(exchange, app, broadcast_func, trade_log_ws, state, save_state_func):
    try:
        order_book = await exchange.fetch_order_book(PAIR_TO_SCAN, limit=50)
    except Exception as e:
        print(f"Order Book Error: {e}")
        return

    large_bids = sorted([{'price': p, 'value_usd': round(p*a)} for p, a in order_book.get('bids', []) if p and a and (p*a > LARGE_ORDER_USD)], key=lambda x: x['value_usd'], reverse=True)
    large_asks = sorted([{'price': p, 'value_usd': round(p*a)} for p, a in order_book.get('asks', []) if p and a and (p*a > LARGE_ORDER_USD)], key=lambda x: x['value_usd'], reverse=True)
    total_bids_usd = sum(b['value_usd'] for b in large_bids[:TOP_N_ORDERS_TO_ANALYZE])
    total_asks_usd = sum(a['value_usd'] for a in large_asks[:TOP_N_ORDERS_TO_ANALYZE])
    if (total_bids_usd + total_asks_usd) < MIN_TOTAL_LIQUIDITY_USD: return
    
    imbalance_ratio = (max(total_bids_usd, total_asks_usd) / min(total_bids_usd, total_asks_usd) 
                       if total_bids_usd > 0 and total_asks_usd > 0 else float('inf'))
    if imbalance_ratio < MIN_IMBALANCE_RATIO: return

    dominant_side_is_bids = total_bids_usd > total_asks_usd
    dominant_side = "–ü–û–ö–£–ü–ê–¢–ï–õ–ï–ô" if dominant_side_is_bids else "–ü–†–û–î–ê–í–¶–û–í"
    largest_order = (large_bids[0] if large_bids else None) if dominant_side_is_bids else (large_asks[0] if large_asks else None)
    expected_direction = "–í–í–ï–†–•" if dominant_side_is_bids else "–í–ù–ò–ó"
    
    signal_msg = (f"üî• <b>–ê–õ–ì–û-–°–ò–ì–ù–ê–õ!</b>\n"
                  f"–°–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–µ—Å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ {dominant_side} (–¥–∏—Å–±–∞–ª–∞–Ω—Å {imbalance_ratio:.1f}x).\n")
    if largest_order:
        signal_msg += f"–ö–ª—é—á–µ–≤–æ–π –æ—Ä–¥–µ—Ä: ${largest_order['value_usd']/1e6:.2f} –º–ª–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ {largest_order['price']}.\n"
    signal_msg += f"–û–∂–∏–¥–∞–Ω–∏–µ: –≤–µ—Ä–æ—è—Ç–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ {expected_direction}."
    
    await broadcast_func(app, signal_msg)

    try:
        ticker = await exchange.fetch_ticker(PAIR_TO_SCAN)
        current_price = ticker.get('last')
        if not current_price:
            await broadcast_func(app, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É. –°–¥–µ–ª–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            return

        side = "LONG" if dominant_side_is_bids else "SHORT"
        sl_price = current_price * (1 - SL_PERCENT if side == "LONG" else 1 + SL_PERCENT)
        tp_price = current_price * (1 + TP_PERCENT if side == "LONG" else 1 - TP_PERCENT)

        decision = {
            "Signal_ID": f"signal_{int(time.time() * 1000)}",
            "Timestamp_UTC": datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S'),
            "Pair": PAIR_TO_SCAN,
            "Confidence_Score": 10,
            "Algorithm_Type": "Imbalance",
            "Strategy_Idea": f"–î–∏—Å–±–∞–ª–∞–Ω—Å {imbalance_ratio:.1f}x –≤ –ø–æ–ª—å–∑—É {dominant_side}",
            "Entry_Price": current_price,
            "SL_Price": sl_price,
            "TP_Price": tp_price,
            "side": side,
            "Trigger_Order_USD": largest_order['value_usd'] if largest_order else 0,
        }
        
        msg = (f"<b>–í–•–û–î –í –°–î–ï–õ–ö–£</b>\n\n"
               f"<b>–¢–∏–ø:</b> Pure Quant Entry (Fixed %)\n"
               f"<b>–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ø–ª–∞–Ω (RR ~1.5:1):</b>\n"
               f" - –í—Ö–æ–¥ (<b>{side}</b>): <code>{current_price:.2f}</code>\n"
               f" - SL: <code>{sl_price:.2f}</code>\n"
               f" - TP: <code>{tp_price:.2f}</code>")
        await broadcast_func(app, msg)

        state['monitored_signals'].append(decision)
        save_state_func()
        await broadcast_func(app, "‚úÖ –°–¥–µ–ª–∫–∞ –≤–∑—è—Ç–∞ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.")
        
        if await log_trade_to_sheet(trade_log_ws, decision, 0):
            await broadcast_func(app, "‚úÖ ...—É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ –≤ Google Sheets.")
        else:
            await broadcast_func(app, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É –≤ Google Sheets.")

    except Exception as e:
        print(f"Error processing new opportunity: {e}", exc_info=True)
        await broadcast_func(app, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–∞.")

async def scanner_main_loop(app, broadcast_func, trade_log_ws, state, save_state_func):
    print(f"Main Engine loop started (v{BOT_VERSION}).")
    exchange = ccxt.mexc({'options': {'defaultType': 'swap'}})
    scan_interval = 15
    while state.get("bot_on", True):
        try:
            await monitor_active_trades(exchange, app, broadcast_func, trade_log_ws, state, save_state_func)
            if not state.get('monitored_signals'):
                await scan_for_new_opportunities(exchange, app, broadcast_func, trade_log_ws, state, save_state_func)
            await asyncio.sleep(scan_interval)
        except asyncio.CancelledError:
            print("Main Engine loop cancelled.")
            break
        except Exception as e:
            print(f"CRITICAL Error in Main Engine loop: {e}", exc_info=True)
            await asyncio.sleep(60)
    print("Main Engine loop stopped.")
    await exchange.close()
