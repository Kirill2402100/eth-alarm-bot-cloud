# scanner_engine.py
# ============================================================================
# v38.0 - –£–ü–†–û–©–ï–ù–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø –ù–ê –û–°–ù–û–í–ï PDI, MDI –ò ADX
# - –í—Ö–æ–¥: |PDI - MDI| > DI_DIFF_THRESHOLD, ADX > ADX_TREND_THRESHOLD, ATR > ATR_MIN
# - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ CONFIRM_CANDLES —Å–≤–µ—á–∞—Ö
# - –ó–∞–∫—Ä—ã—Ç–∏–µ: –ö—Ä–æ—Å—Å–æ–≤–µ—Ä DI –∏–ª–∏ |PDI - MDI| < DI_CLOSE_THRESHOLD, ADX < ADX_FLAT_THRESHOLD –∏–ª–∏ ADX —É–ø–∞–ª –Ω–∞ ADX_DROP_DELTA –æ—Ç –≤—Ö–æ–¥–∞
# - SL/TP –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
# - –£–±—Ä–∞–Ω—ã –¥–∏—Å–±–∞–ª–∞–Ω—Å, –∞–≥—Ä–µ—Å—Å–∏—è, —Å—Ç–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤
# ============================================================================
import asyncio
import time
import logging
from datetime import datetime, timezone
import pandas as pd
import pandas_ta as ta

import ccxt.async_support as ccxt
from telegram.ext import Application

from trade_executor import log_trade_to_sheet, update_trade_in_sheet, log_debug_data
from state_utils import save_state

log = logging.getLogger("bot")

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞ ==================================================
PAIR_TO_SCAN = 'SOL/USDT'
TIMEFRAME = '5m'
SCAN_INTERVAL = 5
SL_BUFFER_PERCENT = 0.0005
MIN_SL_DISTANCE_PCT = 0.005  # 0.5%

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---
DI_DIFF_THRESHOLD = 5.0
DI_CLOSE_THRESHOLD = 2.0  # –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ —Å—É–∂–µ–Ω–∏–∏ —Ä–∞–∑–Ω–∏—Ü—ã
ADX_PERIOD = 14
ATR_PERIOD = 14
ADX_TREND_THRESHOLD = 20
ADX_FLAT_THRESHOLD = 15
ADX_DROP_DELTA = 5  # –ó–∞–∫—Ä—ã—Ç—å, –µ—Å–ª–∏ ADX —É–ø–∞–ª –Ω–∞ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –≤—Ö–æ–¥–∞
ATR_MIN = 1.0
TP_ATR_MULTIPLIER = 2.0
CONFIRM_CANDLES = 2  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ N —Å–≤–µ—á–∞—Ö

# === –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ =====================================================
def calculate_indicators(ohlcv):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç ADX, +DI (DMP), -DI (DMN), ATR –ø–æ –¥–∞–Ω–Ω—ã–º —Å–≤–µ—á–µ–π. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    if not ohlcv or len(ohlcv) < max(ADX_PERIOD, ATR_PERIOD) + CONFIRM_CANDLES - 1:
        return None, None, None, None, None, None, None, None
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df.ta.adx(length=ADX_PERIOD, append=True)
    df.ta.atr(length=ATR_PERIOD, append=True)
    last = df.iloc[-1]
    prev = df.iloc[-CONFIRM_CANDLES] if len(df) >= CONFIRM_CANDLES else None
    return (
        last['ADX_14'], last['DMP_14'], last['DMN_14'], last['ATRr_14'],
        prev['ADX_14'] if prev is not None else None,
        prev['DMP_14'] if prev is not None else None,
        prev['DMN_14'] if prev is not None else None,
        prev['ATRr_14'] if prev is not None else None
    )

# === –õ–æ–≥–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è =============================================
async def scan_for_new_opportunities(exchange, app: Application, broadcast_func, ohlcv):
    bot_data = app.bot_data
    status_code, status_message = None, None
    extended_message = "" 
    reason_prop = ""
    side = ""
    di_diff = 0
    atr = 0
    adx = None
    try:
        adx, pdi, mdi, atr, prev_adx, prev_pdi, prev_mdi, prev_atr = calculate_indicators(ohlcv)
        if adx is None:
            status_code, status_message = "WAIT_ADX", "–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ADX..."
            reason_prop = "WAIT_ADX"
            return

        extended_message = f"ADX: {adx:.1f}, PDI: {pdi:.1f}, MDI: {mdi:.1f}, ATR: {atr:.2f}. "
        
        if adx < ADX_FLAT_THRESHOLD or atr < ATR_MIN:
            status_code, status_message = "MARKET_IS_FLAT", f"ADX ({adx:.1f}) < {ADX_FLAT_THRESHOLD} –∏–ª–∏ ATR {atr:.2f} < {ATR_MIN}. –†—ã–Ω–æ–∫ –≤–æ —Ñ–ª—ç—Ç–µ –∏–ª–∏ –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å."
            reason_prop = "FLAT_OR_LOW_ATR"
            return
        
        elif adx < ADX_TREND_THRESHOLD:
            status_code, status_message = "MARKET_IS_WEAK", f"ADX ({adx:.1f}) –≤ '—Å–µ—Ä–æ–π –∑–æ–Ω–µ' ({ADX_FLAT_THRESHOLD}-{ADX_TREND_THRESHOLD}). –ñ–¥—É —Å–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞."
            reason_prop = "WEAK"
            return
        
        else:
            status_code, status_message = "SCANNING_IN_TREND", f"ADX ({adx:.1f}) > {ADX_TREND_THRESHOLD}. –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–∞ –≤ —Ç—Ä–µ–Ω–¥–µ..."
            
            di_diff = abs(pdi - mdi)
            side = "LONG" if pdi > mdi else "SHORT"
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ CONFIRM_CANDLES —Å–≤–µ—á–∞—Ö
            if prev_pdi is None:
                extended_message += "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
                reason_prop = "NO_CONFIRM_DATA"
                return
            
            prev_di_diff = abs(prev_pdi - prev_mdi)
            prev_side = "LONG" if prev_pdi > prev_mdi else "SHORT"
            if di_diff <= DI_DIFF_THRESHOLD or prev_di_diff <= DI_DIFF_THRESHOLD or side != prev_side:
                extended_message += "–°–∏–≥–Ω–∞–ª –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–≤–µ—á–∞—Ö."
                reason_prop = "NO_CONFIRM"
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ entry_price (–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã)
            trades = await exchange.fetch_trades(PAIR_TO_SCAN, limit=1, params={'type': 'swap'})
            if not trades:
                return
            entry_price = trades[0]['price']
            
            # SL –∏ TP
            sl_distance = atr  # 1x ATR
            sl_price = entry_price - sl_distance * (1 + SL_BUFFER_PERCENT) if side == "LONG" else entry_price + sl_distance * (1 + SL_BUFFER_PERCENT)
            if abs(entry_price - sl_price) / entry_price < MIN_SL_DISTANCE_PCT:
                extended_message += f"SL distance: {abs(entry_price - sl_price) / entry_price:.4f} < {MIN_SL_DISTANCE_PCT}. –ü—Ä–æ–ø—É—â–µ–Ω."
                reason_prop = "SMALL_SL"
                return
            
            tp_price = entry_price + atr * TP_ATR_MULTIPLIER if side == "LONG" else entry_price - atr * TP_ATR_MULTIPLIER
            
            idea = f"ADX {adx:.1f} (Dir: {side}). DI diff: {di_diff:.1f} (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ)"
            decision = {"Signal_ID": f"signal_{int(time.time() * 1000)}", 
                        "Timestamp_UTC": datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S'),
                        "Pair": PAIR_TO_SCAN, "Algorithm_Type": "Directional ADX DMI", 
                        "Strategy_Idea": idea, "Entry_Price": entry_price, "SL_Price": sl_price, 
                        "TP_Price": tp_price, "side": side, "Deposit": bot_data.get('deposit', 50), 
                        "Leverage": bot_data.get('leverage', 100),
                        "ADX": adx, "PDI": pdi, "MDI": mdi, "ATR": atr, "entry_adx": adx
                    }
            msg = f"üî• <b>–í–•–û–î –í –°–î–ï–õ–ö–£ ({side})</b>\n\n<b>–¢–∏–ø:</b> <code>{idea}</code>\n<b>–í—Ö–æ–¥:</b> <code>{entry_price:.2f}</code> | <b>SL:</b> <code>{sl_price:.2f}</code> | <b>TP:</b> <code>{tp_price:.2f}</code>"
            await broadcast_func(app, msg)
            await log_trade_to_sheet(decision)
            bot_data['monitored_signals'].append(decision)
            save_state(app)
            extended_message += "–°–∏–≥–Ω–∞–ª –Ω–∞–π–¥–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"
            reason_prop = "SIGNAL_FOUND"

        # Log –≤ debug sheet –µ—Å–ª–∏ debug_on
        if bot_data.get('debug_mode_on', False):
            debug_data = {
                "Timestamp_UTC": datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S'),
                "ADX": adx, "PDI": pdi, "MDI": mdi, "ATR": atr,
                "Side": side, "DI_Diff": di_diff, "Reason_Prop": reason_prop
            }
            await log_debug_data(debug_data)

    except Exception as e:
        status_code, status_message = "SCANNER_ERROR", f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}"
        extended_message = ""
        log.error(status_message, exc_info=True)
    
    # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    if bot_data.get('debug_mode_on', False):
        full_msg = f"<code>{status_message} {extended_message}</code>"
        await broadcast_func(app, full_msg)
    else:
        last_code = bot_data.get('last_debug_code', '')
        if status_code and status_code != last_code:
            bot_data['last_debug_code'] = status_code
            await broadcast_func(app, f"<code>{status_message}</code>")

# === –õ–æ–≥–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ =============================================
async def monitor_active_trades(exchange, app: Application, broadcast_func):
    bot_data = app.bot_data
    if not bot_data.get('monitored_signals'): return
    signal = bot_data['monitored_signals'][0]
    pair, entry_price, sl_price, tp_price, side, entry_adx = (signal['Pair'], signal['Entry_Price'], signal['SL_Price'], signal.get('TP_Price'), signal['side'], signal.get('entry_adx'))
    try:
        # Fetch current price
        order_book = await exchange.fetch_order_book(pair, limit=5, params={'type': 'swap'})
        if not (order_book.get('bids') and order_book['bids'][0] and order_book.get('asks') and order_book['asks'][0]): return
        best_bid, best_ask = order_book['bids'][0][0], order_book['asks'][0][0]
        last_price = (best_bid + best_ask) / 2
        
        # Fetch recent OHLCV for indicators
        recent_ohlcv = await exchange.fetch_ohlcv(pair, timeframe=TIMEFRAME, limit=50, params={'type': 'swap'})
        current_adx, current_pdi, current_mdi, current_atr, _, _, _, _ = calculate_indicators(recent_ohlcv)
        
        exit_status, exit_price, reason = None, None, None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP/SL
        if (side == 'LONG' and last_price >= tp_price) or (side == 'SHORT' and last_price <= tp_price):
            exit_status, exit_price, reason = "TP_HIT", tp_price if side == 'LONG' else tp_price, "Take Profit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç"
        
        if not exit_status:
            if (side == 'LONG' and last_price <= sl_price) or (side == 'SHORT' and last_price >= sl_price):
                exit_status, exit_price, reason = "SL_HIT", sl_price, "–ê–≤–∞—Ä–∏–π–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ DMI –∏ ADX –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        if not exit_status:
            current_di_diff = abs(current_pdi - current_mdi)
            current_trend_dir = "LONG" if current_pdi > current_mdi else "SHORT"
            if current_di_diff < DI_CLOSE_THRESHOLD or current_trend_dir != side:
                exit_status, exit_price, reason = "DI_CROSS_OR_CLOSE", last_price, "–ö—Ä–æ—Å—Å–æ–≤–µ—Ä DI –∏–ª–∏ —Å—É–∂–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã"
            elif current_adx < ADX_FLAT_THRESHOLD or current_adx < entry_adx - ADX_DROP_DELTA:
                exit_status, exit_price, reason = "ADX_DROP", last_price, "–ü–∞–¥–µ–Ω–∏–µ ADX –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞"
        
        if exit_status:
            pnl_percent_raw = ((exit_price - entry_price) / entry_price) * (-1 if side == 'SHORT' else 1)
            pnl_usd = signal['Deposit'] * signal['Leverage'] * pnl_percent_raw
            pnl_percent_display = pnl_percent_raw * 100 * signal['Leverage']
            await update_trade_in_sheet(signal, exit_status, exit_price, pnl_usd, pnl_percent_display, reason=reason)
            emoji = "‚úÖ" if pnl_usd > 0 else "‚ùå"
            msg = (f"{emoji} <b>–°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê ({exit_status})</b>\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n<b>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${pnl_usd:+.2f} ({pnl_percent_display:+.2f}%)</b>")
            await broadcast_func(app, msg)
            bot_data['monitored_signals'] = []
            save_state(app)
    except Exception as e:
        log.error(f"CRITICAL MONITORING ERROR: {e}", exc_info=True)
        await broadcast_func(app, f"‚ö†Ô∏è <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!</b>\n<code>–û—à–∏–±–∫–∞: {e}</code>")

# === –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª ============================================
async def scanner_main_loop(app: Application, broadcast_func):
    bot_version = getattr(app, 'bot_version', 'N/A')
    log.info(f"Main Engine loop starting (v{bot_version})...")
    exchange = None

    try:
        exchange = ccxt.mexc({'options': {'defaultType': 'swap'}, 'enableRateLimit': True})
        await exchange.load_markets()
        log.info("Exchange connection and markets loaded.")

        last_ohlcv_update_time = 0

        while app.bot_data.get("bot_on", False):
            try:
                if time.time() - last_ohlcv_update_time > 60:
                    ohlcv = await exchange.fetch_ohlcv(PAIR_TO_SCAN, timeframe=TIMEFRAME, limit=50, params={'type': 'swap'})
                    last_ohlcv_update_time = time.time()
                if not app.bot_data.get('monitored_signals'):
                    await scan_for_new_opportunities(exchange, app, broadcast_func, ohlcv)
                else:
                    await monitor_active_trades(exchange, app, broadcast_func)

                await asyncio.sleep(SCAN_INTERVAL)
            except Exception as e:
                log.critical(f"CRITICAL Error in loop iteration: {e}", exc_info=True)
                await broadcast_func(app, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(20)
    except Exception as e:
        log.critical(f"CRITICAL STARTUP ERROR: {e}", exc_info=True)
        await broadcast_func(app, f"<b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê!</b>\n<code>–û—à–∏–±–∫–∞: {e}</code>")
    finally:
        if exchange:
            await exchange.close()
        log.info("Main Engine loop stopped.")
