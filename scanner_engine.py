# File: scanner_engine.py (v6 - Final Corrected Version)

import asyncio
import json
from data_feeder import last_data

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ö–ê–ù–ï–†–ê ---
LARGE_ORDER_USD = 50000

# --- –ü–†–û–ú–ü–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ú–ò–ö–†–û–°–¢–†–£–ö–¢–£–†–´ ---
LLM_PROMPT_MICROSTRUCTURE = """
–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫-–∫–≤–∞–Ω—Ç –≤ HFT-—Ñ–æ–Ω–¥–µ, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä—ã–Ω–∫–∞ (Order Flow, Market Making).

**–¢–í–û–Ø –ó–ê–î–ê–ß–ê:**
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ JSON-–¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∏—Ä–∂–µ–≤–æ–≥–æ —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä. –î–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—é—Ç –∫–ª–∞—Å—Ç–µ—Ä—ã –∫—Ä—É–ø–Ω—ã—Ö –ª–∏–º–∏—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫ ("–ø–ª–∏—Ç") –Ω–∞ –ø–æ–∫—É–ø–∫—É (bids) –∏ –ø—Ä–æ–¥–∞–∂—É (asks).

1.  **–í—ã–±–µ—Ä–∏ –û–î–ù–£ –°–ê–ú–£–Æ –ª—É—á—à—É—é –ø–∞—Ä—É** —Å –Ω–∞–∏–±–æ–ª–µ–µ —è–≤–Ω—ã–º –∏ –Ω–∞–¥–µ–∂–Ω—ã–º —Å–µ—Ç–∞–ø–æ–º –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏. –ò—â–∏ —á–µ—Ç–∫–∏–µ "–∫–æ—Ä–∏–¥–æ—Ä—ã", —Å–∏–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–ª–∏—Ç–∞–º–∏.
2.  **–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –∞–ª–≥–æ—Ä–∏—Ç–º–∞,** –∫–æ—Ç–æ—Ä—ã–π, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Å–æ–∑–¥–∞–µ—Ç —ç—Ç–∏ –ø–ª–∏—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Market-Maker", "Absorption Algorithm", "Spoofing Wall").
3.  **–ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω,** –µ—Å–ª–∏ —Å–µ—Ç–∞–ø –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–¥–µ–∂–µ–Ω.

**–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:**
–í–µ—Ä–Ω–∏ –û–î–ò–ù JSON-–æ–±—ä–µ–∫—Ç (–Ω–µ –º–∞—Å—Å–∏–≤) –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.

{
  "pair": "BTC/USDT",
  "confidence_score": 9,
  "algorithm_type": "Classic Market-Maker",
  "strategy_idea": "Range Trading (Long)",
  "reason": "–û—á–µ–Ω—å –ø–ª–æ—Ç–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä –±–∏–¥–æ–≤ –≤—ã—Å—Ç—É–ø–∞–µ—Ç —Å–∏–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ê—Å–∫–∏ —Ä–∞–∑—Ä–µ–∂–µ–Ω—ã. –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Å–∫–æ–∫–∞ –∫ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ.",
  "entry_price": 119200.0,
  "sl_price": 119050.0,
  "tp_price": 119800.0
}

–ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–µ—Ç–∞–ø–æ–≤ –Ω–µ—Ç, –≤–µ—Ä–Ω–∏: {"confidence_score": 0}
"""

async def scanner_main_loop(app, ask_llm_func, broadcast_func):
    """
    –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Å–∫–∞–Ω–µ—Ä–∞ —Å –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π LLM.
    –í–∫–ª—é—á–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞.
    """
    print("Scanner Engine loop started.")
    last_llm_call_time = 0

    while True:
        try:
            await asyncio.sleep(5)

            market_anomalies = {}
            current_data_snapshot = dict(last_data)

            for symbol, data in current_data_snapshot.items():
                if not data or not data.get('bids') or not data.get('asks'):
                    continue

                market_anomalies[symbol] = {'bids': [], 'asks': []}

                # --- –ù–ê–î–ï–ñ–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–ê–ö–ê–ù–ê ---
                for order in data.get('bids', []):
                    if not (isinstance(order, (list, tuple)) and len(order) >= 2): continue
                    price, amount = order[0], order[1]
                    if price is None or amount is None: continue
                    order_value_usd = price * amount
                    if order_value_usd > LARGE_ORDER_USD:
                        market_anomalies[symbol]['bids'].append({'price': price, 'value_usd': round(order_value_usd)})

                for order in data.get('asks', []):
                    if not (isinstance(order, (list, tuple)) and len(order) >= 2): continue
                    price, amount = order[0], order[1]
                    if price is None or amount is None: continue
                    order_value_usd = price * amount
                    if order_value_usd > LARGE_ORDER_USD:
                        market_anomalies[symbol]['asks'].append({'price': price, 'value_usd': round(order_value_usd)})

            current_time = asyncio.get_event_loop().time()
            if (current_time - last_llm_call_time) > 45 and any(d['bids'] or d['asks'] for d in market_anomalies.values()):
                last_llm_call_time = current_time
                
                prompt_data = json.dumps(market_anomalies, indent=2)
                full_prompt = LLM_PROMPT_MICROSTRUCTURE + "\n\n–ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú–´–ï –î–ê–ù–ù–´–ï:\n" + prompt_data
                
                await broadcast_func(app, "üß† –°–∫–∞–Ω–µ—Ä –æ–±–Ω–∞—Ä—É–∂–∏–ª –∞–Ω–æ–º–∞–ª–∏–∏. –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑ LLM...")
                
                llm_response_content = await ask_llm_func(full_prompt)
                
                if llm_response_content:
                    try:
                        cleaned_response = llm_response_content.strip().strip('```json').strip('```').strip()
                        decision = json.loads(cleaned_response)

                        if decision.get("confidence_score", 0) >= 7:
                            msg = (f"<b>üî• LLM –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø (–û—Ü–µ–Ω–∫–∞: {decision['confidence_score']}/10)</b>\n\n"
                                   f"<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> <code>{decision['pair']}</code>\n"
                                   f"<b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {decision['strategy_idea']}\n"
                                   f"<b>–ê–ª–≥–æ—Ä–∏—Ç–º:</b> <i>{decision['algorithm_type']}</i>\n"
                                   f"<b>–ü–ª–∞–Ω:</b>\n"
                                   f"  - –í—Ö–æ–¥: <code>{decision.get('entry_price', 'N/A')}</code>\n"
                                   f"  - SL: <code>{decision.get('sl_price', 'N/A')}</code>\n"
                                   f"  - TP: <code>{decision.get('tp_price', 'N/A')}</code>\n\n"
                                   f"<b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b> <i>\"{decision['reason']}\"</i>")
                            await broadcast_func(app, msg)
                        else:
                            await broadcast_func(app, "üßê LLM –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ –Ω–∞—à–µ–ª —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Å–µ—Ç–∞–ø–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏.")
                    except Exception as e:
                        print(f"Error parsing LLM decision: {e} | Response: {llm_response_content}")
                        await broadcast_func(app, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ LLM.")
                else:
                    await broadcast_func(app, "‚ö†Ô∏è LLM –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∑–∞–ø—Ä–æ—Å.")

        except asyncio.CancelledError:
            print("Scanner Engine loop cancelled.")
            break
        except Exception as e:
            print(f"Error in Scanner Engine loop: {e}")
            await asyncio.sleep(10)
