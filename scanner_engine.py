# scanner_engine.py

import asyncio
import time
import logging
import pandas as pd
import pandas_ta as ta
import ccxt.async_support as ccxt
from telegram.ext import Application
from datetime import datetime, timezone
from trade_executor import log_open_trade, update_closed_trade
# <<< –£–±—Ä–∞–ª–∏ debug_executor, —Ç.–∫. –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ ML –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è >>>

log = logging.getLogger("bot")

# <<< –ù–û–í–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–¢–†–ê–¢–ï–ì–ò–ò >>>
PAIR_TO_SCAN = 'SOL/USDT'
TIMEFRAME = '5m' # <<< –ò–∑–º–µ–Ω–µ–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º
SCAN_INTERVAL = 10 # –£–≤–µ–ª–∏—á–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –ª–∏—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ 5–º —Å–≤–µ—á–∞—Ö

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ RSI Momentum ---
RSI_PERIOD = 14
RSI_OVERBOUGHT = 80
RSI_OVERSOLD = 20
RSI_MID_LINE = 50
PRICE_STOP_LOSS_PERCENT = 0.005 # 0.5%

# <<< –£–±—Ä–∞–ª–∏ –∑–∞–≥—Ä—É–∑–∫—É ML –ú–æ–¥–µ–ª–∏ >>>

# <<< –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Å—å DataFrame, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –≤–∏–¥–µ—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è RSI >>>
def calculate_features(ohlcv):
    if len(ohlcv) < RSI_PERIOD + 2: # –ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è RSI
        return None
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df.ta.rsi(length=RSI_PERIOD, append=True)
    df.dropna(inplace=True)
    return df

async def monitor_active_trades(exchange, app: Application, broadcast_func):
    bot_data = app.bot_data
    signal = bot_data['monitored_signals'][0]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ RSI
        ohlcv = await exchange.fetch_ohlcv(PAIR_TO_SCAN, timeframe=TIMEFRAME, limit=RSI_PERIOD + 5)
        features_df = calculate_features(ohlcv)
        if features_df is None or len(features_df) < 2:
            return # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        current_rsi = features_df[f'RSI_{RSI_PERIOD}'].iloc[-1]
        prev_rsi = features_df[f'RSI_{RSI_PERIOD}'].iloc[-2]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Stop Loss
        order_book = await exchange.fetch_order_book(signal['Pair'], limit=1)
        last_price = (order_book['bids'][0][0] + order_book['asks'][0][0]) / 2

        exit_status, exit_price = None, last_price
        
        # <<< –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –í–´–•–û–î–ê –ò–ó –°–î–ï–õ–ö–ò >>>
        if signal['side'] == 'LONG':
            if last_price <= signal['SL_Price']:
                exit_status = "SL_HIT"
            elif current_rsi < prev_rsi:
                exit_status = "RSI_REVERSAL"
            elif current_rsi >= RSI_OVERBOUGHT:
                exit_status = "RSI_LIMIT_HIT"
                
        elif signal['side'] == 'SHORT':
            if last_price >= signal['SL_Price']:
                exit_status = "SL_HIT"
            elif current_rsi > prev_rsi:
                exit_status = "RSI_REVERSAL"
            elif current_rsi <= RSI_OVERSOLD:
                exit_status = "RSI_LIMIT_HIT"

        if exit_status:
            pnl_pct_raw = ((exit_price - signal['Entry_Price']) / signal['Entry_Price']) * (1 if signal['side'] == 'LONG' else -1)
            deposit = bot_data.get('deposit', 50)
            leverage = bot_data.get('leverage', 100)
            pnl_usd = deposit * leverage * pnl_pct_raw
            pnl_percent_display = pnl_pct_raw * 100 * leverage

            emoji = "‚úÖ" if pnl_usd > 0 else "‚ùå"
            msg = (f"{emoji} <b>–°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê ({exit_status})</b>\n\n"
                   f"<b>–ü–∞—Ä–∞:</b> {signal['Pair']}\n"
                   f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${pnl_usd:+.2f} ({pnl_percent_display:+.2f}%)</b>")
            await broadcast_func(app, msg)
            
            # <<< –ü–µ—Ä–µ–¥–∞–µ–º None –≤–º–µ—Å—Ç–æ PNL, —Ç.–∫. –æ–Ω —É–∂–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ >>>
            await update_closed_trade(signal['Signal_ID'], exit_status, exit_price, pnl_usd, pnl_percent_display)
            bot_data['monitored_signals'] = []

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}", exc_info=True)


async def scan_for_signals(exchange, app: Application, broadcast_func):
    try:
        ohlcv = await exchange.fetch_ohlcv(PAIR_TO_SCAN, timeframe=TIMEFRAME, limit=RSI_PERIOD + 5)
        features_df = calculate_features(ohlcv)
        if features_df is None or len(features_df) < 2:
            return # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        current_rsi = features_df[f'RSI_{RSI_PERIOD}'].iloc[-1]
        prev_rsi = features_df[f'RSI_{RSI_PERIOD}'].iloc[-2]

        side = None
        
        # <<< –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –í–•–û–î–ê –í –°–î–ï–õ–ö–£ >>>
        if prev_rsi < RSI_MID_LINE and current_rsi > RSI_MID_LINE:
            side = "LONG"
        elif prev_rsi > RSI_MID_LINE and current_rsi < RSI_MID_LINE:
            side = "SHORT"
        
        if side:
            # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è –∏–∑ DataFrame
            await execute_trade(app, broadcast_func, features_df.iloc[-1], side)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ live-—Ä–µ–∂–∏–º–µ
        if app.bot_data.get('live_info_on', False):
            info_msg = (f"<b>[RSI INFO]</b> | Current: <code>{current_rsi:.2f}</code> | "
                        f"Close: <code>{features_df['close'].iloc[-1]:.2f}</code>")
            await broadcast_func(app, info_msg)

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)


async def execute_trade(app, broadcast_func, features, side):
    # <<< –£–±—Ä–∞–ª–∏ 'probability' –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ >>>
    entry_price = features['close']
    sl_price = entry_price * (1 - PRICE_STOP_LOSS_PERCENT) if side == "LONG" else entry_price * (1 + PRICE_STOP_LOSS_PERCENT)
    signal_id = f"rsi_{int(time.time() * 1000)}"

    decision = {
        "Signal_ID": signal_id, "Pair": PAIR_TO_SCAN, "side": side,
        "Entry_Price": entry_price, "SL_Price": sl_price, 
        "Status": "ACTIVE",
        "Timestamp_UTC": datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S'),
        # <<< –£–ø—Ä–æ—Å—Ç–∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å, —É–±—Ä–∞–≤ –ª–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ >>>
        "RSI_at_Entry": features.get(f'RSI_{RSI_PERIOD}'),
    }
    
    app.bot_data.setdefault('monitored_signals', []).append(decision)
    # <<< TP_Price –±–æ–ª—å—à–µ –Ω–µ—Ç, –æ–Ω –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ RSI >>>
    await log_open_trade(decision)

    msg = (f"üî• <b>RSI –°–ò–ì–ù–ê–õ –ù–ê –í–•–û–î ({side})</b>\n\n"
           f"<b>–ü–∞—Ä–∞:</b> {PAIR_TO_SCAN}\n"
           f"<b>–í—Ö–æ–¥:</b> <code>{entry_price:.4f}</code>\n"
           f"<b>SL:</b> <code>{sl_price:.4f}</code>\n"
           f"<i>(TP –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ —Ä–∞–∑–≤–æ—Ä–æ—Ç—É RSI)</i>")
    await broadcast_func(app, msg)


async def scanner_main_loop(app: Application, broadcast_func):
    log.info("RSI Momentum Engine loop starting...")
    
    exchange = ccxt.mexc({'options': {'defaultType': 'swap'}, 'enableRateLimit': True})
    await exchange.load_markets()
    
    while app.bot_data.get("bot_on", False):
        if not app.bot_data.get('monitored_signals'):
            await scan_for_signals(exchange, app, broadcast_func)
        else:
            await monitor_active_trades(exchange, app, broadcast_func)
        
        await asyncio.sleep(SCAN_INTERVAL)
        
    await exchange.close()
    log.info("RSI Momentum Engine loop stopped.")
