# scanner_engine.py
# ============================================================================
# v39.1 - –†–ï–ñ–ò–ú LIVE-–õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# - –í –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤,
#   –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º live-–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (/info).
# ============================================================================
import asyncio
import time
import logging
from datetime import datetime, timezone
import pandas as pd
import pandas_ta as ta

import ccxt.async_support as ccxt
from telegram.ext import Application

from trade_executor import log_trade_to_sheet, update_trade_in_sheet, log_debug_data
from state_utils import save_state

log = logging.getLogger("bot")

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞ ==================================================
PAIR_TO_SCAN = 'SOL/USDT'
TIMEFRAME = '1m'
SCAN_INTERVAL = 5

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---
RSI_PERIOD = 14
STOCH_K = 14
STOCH_D = 3
STOCH_SMOOTH = 3
RSI_LONG_THRESHOLD = 35
RSI_SHORT_THRESHOLD = 75
STOCH_LONG_THRESHOLD = 20
STOCH_SHORT_THRESHOLD = 80

TP_PERCENT = 0.01  # 1%
SL_PERCENT = 0.0025  # 0.25%
INTERMEDIATE_PERCENT = 0.005  # 0.5% –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SL

# === –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ =====================================================
def calculate_indicators(ohlcv):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç RSI –∏ Stochastic –ø–æ –¥–∞–Ω–Ω—ã–º —Å–≤–µ—á–µ–π."""
    if not ohlcv or len(ohlcv) < max(RSI_PERIOD, STOCH_K) + STOCH_SMOOTH:
        return None, None, None
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df.ta.rsi(length=RSI_PERIOD, append=True)
    df.ta.stoch(high=df['high'], low=df['low'], close=df['close'], k=STOCH_K, d=STOCH_D, smooth_k=STOCH_SMOOTH, append=True)
    last = df.iloc[-1]
    return last[f'RSI_{RSI_PERIOD}'], last[f'STOCHk_{STOCH_K}_{STOCH_D}_{STOCH_SMOOTH}'], last[f'STOCHd_{STOCH_K}_{STOCH_D}_{STOCH_SMOOTH}']

# === –õ–æ–≥–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è =============================================
async def scan_for_new_opportunities(exchange, app: Application, broadcast_func, ohlcv):
    bot_data = app.bot_data
    reason_prop = ""
    side = ""
    try:
        rsi, stoch_k, stoch_d = calculate_indicators(ohlcv)
        if rsi is None:
            return # –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º, –æ—Å–Ω–æ–≤–Ω–∞—è –ø–µ—Ç–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è live-–ª–æ–≥–∞

        trades = await exchange.fetch_trades(PAIR_TO_SCAN, limit=1, params={'type': 'swap'})
        if not trades:
            return
        entry_price = trades[0]['price']

        if rsi < RSI_LONG_THRESHOLD and stoch_k > stoch_d and stoch_k < STOCH_LONG_THRESHOLD:
            side = "LONG"
        elif rsi > RSI_SHORT_THRESHOLD and stoch_k < stoch_d and stoch_k > STOCH_SHORT_THRESHOLD:
            side = "SHORT"
        else:
            reason_prop = "NO_SIGNAL"
            # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º. –ù–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–¥–µ—Å—å.
            return

        sl_price = entry_price * (1 - SL_PERCENT) if side == "LONG" else entry_price * (1 + SL_PERCENT)
        tp_price = entry_price * (1 + TP_PERCENT) if side == "LONG" else entry_price * (1 - TP_PERCENT)
        intermediate_sl = entry_price * (1 + INTERMEDIATE_PERCENT) if side == "LONG" else entry_price * (1 - INTERMEDIATE_PERCENT)

        idea = f"RSI {rsi:.1f}, Stoch K/D {stoch_k:.1f}/{stoch_d:.1f}"
        decision = {"Signal_ID": f"signal_{int(time.time() * 1000)}",
                      "Timestamp_UTC": datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S'),
                      "Pair": PAIR_TO_SCAN, "Algorithm_Type": "RSI Stoch 1m",
                      "Strategy_Idea": idea, "Entry_Price": entry_price, "SL_Price": sl_price,
                      "TP_Price": tp_price, "Intermediate_SL": intermediate_sl, "side": side,
                      "Deposit": bot_data.get('deposit', 50), "Leverage": bot_data.get('leverage', 100),
                      "RSI": rsi, "Stoch_K": stoch_k, "Stoch_D": stoch_d,
                      "intermediate_triggered": False
                      }
        msg = f"üî• <b>–í–•–û–î –í –°–î–ï–õ–ö–£ ({side})</b>\n\n<b>–¢–∏–ø:</b> <code>{idea} ({side})</code>\n<b>–í—Ö–æ–¥:</b> <code>{entry_price:.4f}</code> | <b>SL:</b> <code>{sl_price:.4f}</code> | <b>TP:</b> <code>{tp_price:.4f}</code>"
        await broadcast_func(app, msg)
        await log_trade_to_sheet(decision)
        bot_data['monitored_signals'].append(decision)
        save_state(app)
        reason_prop = "SIGNAL_FOUND"

        if bot_data.get('debug_mode_on', False):
            await log_debug_data({
                "Timestamp_UTC": datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S'),
                "RSI": rsi, "Stoch_K": stoch_k, "Stoch_D": stoch_d,
                "Side": side, "Reason_Prop": reason_prop
            })

    except Exception as e:
        log.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–ö–ê–ù–ï–†–ê: {e}", exc_info=True)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ live-–ª–æ–≥–∏
        if not bot_data.get('live_info_on', False):
            await broadcast_func(app, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∫–∞–Ω–µ—Ä–µ: {e}")

# === –õ–æ–≥–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ =============================================
async def monitor_active_trades(exchange, app: Application, broadcast_func):
    bot_data = app.bot_data
    if not bot_data.get('monitored_signals'): return
    signal = bot_data['monitored_signals'][0]
    pair, entry_price, sl_price, tp_price, intermediate_sl, side = (signal['Pair'], signal['Entry_Price'], signal['SL_Price'], signal['TP_Price'], signal['Intermediate_SL'], signal['side'])
    intermediate_triggered = signal.get('intermediate_triggered', False)
    try:
        order_book = await exchange.fetch_order_book(pair, limit=1, params={'type': 'swap'})
        last_price = (order_book['bids'][0][0] + order_book['asks'][0][0]) / 2
        
        # Live-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏
        if bot_data.get('live_info_on', False):
             pnl_percent_raw = ((last_price - entry_price) / entry_price) * (-1 if side == 'SHORT' else 1)
             pnl_percent_display = pnl_percent_raw * 100 * signal['Leverage']
             info_msg = (
                 f"<b>[MONITOR]</b> | {side} {pair}\n"
                 f"–¶–µ–Ω–∞: <code>{last_price:.4f}</code> (–≤—Ö–æ–¥ {entry_price:.4f})\n"
                 f"PnL: <code>{pnl_percent_display:+.2f}%</code>"
             )
             await broadcast_func(app, info_msg)

        exit_status, exit_price, reason = None, None, None
        
        if not intermediate_triggered:
            if (side == 'LONG' and last_price >= intermediate_sl) or (side == 'SHORT' and last_price <= intermediate_sl):
                msg = f"üìà <b>–ü—Ä–æ—Ñ–∏—Ç 0.5% ({side})</b>\nSL –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞: {intermediate_sl:.4f}."
                await broadcast_func(app, msg)
                signal['intermediate_triggered'] = True
                signal['SL_Price'] = intermediate_sl
                sl_price = intermediate_sl
                save_state(app)
        
        if (side == 'LONG' and last_price >= tp_price) or (side == 'SHORT' and last_price <= tp_price):
            exit_status, exit_price, reason = "TP_HIT", tp_price, "Take Profit"
        elif (side == 'LONG' and last_price <= sl_price) or (side == 'SHORT' and last_price >= sl_price):
            exit_status, exit_price, reason = "SL_HIT", sl_price, "Stop Loss"
        
        if exit_status:
            pnl_percent_raw = ((exit_price - entry_price) / entry_price) * (-1 if side == 'SHORT' else 1)
            pnl_usd = signal['Deposit'] * signal['Leverage'] * pnl_percent_raw
            pnl_percent_display = pnl_percent_raw * 100 * signal['Leverage']
            await update_trade_in_sheet(signal, exit_status, exit_price, pnl_usd, pnl_percent_display, reason=reason)
            emoji = "‚úÖ" if pnl_usd >= 0 else "‚ùå"
            msg = (f"{emoji} <b>–°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê ({reason})</b>\n\n"
                   f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${pnl_usd:+.2f} ({pnl_percent_display:+.2f}%)</b>")
            await broadcast_func(app, msg)
            bot_data['monitored_signals'] = []
            save_state(app)
    except Exception as e:
        log.error(f"CRITICAL MONITORING ERROR: {e}", exc_info=True)
        await broadcast_func(app, f"‚ö†Ô∏è <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!</b>\n<code>–û—à–∏–±–∫–∞: {e}</code>")

# === –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª ============================================
async def scanner_main_loop(app: Application, broadcast_func):
    bot_version = getattr(app, 'bot_version', 'N/A')
    log.info(f"Main Engine loop starting (v{bot_version})...")
    exchange = None
    ohlcv = []
    last_ohlcv_update_time = 0

    try:
        exchange = ccxt.mexc({'options': {'defaultType': 'swap'}, 'enableRateLimit': True})
        await exchange.load_markets()
        log.info("Exchange connection and markets loaded.")

        while app.bot_data.get("bot_on", False):
            try:
                current_time = time.time()
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–µ—á–∏ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
                if current_time - last_ohlcv_update_time > 60:
                    ohlcv = await exchange.fetch_ohlcv(PAIR_TO_SCAN, timeframe=TIMEFRAME, limit=100, params={'type': 'swap'})
                    last_ohlcv_update_time = current_time
                    log.info("OHLCV data updated.")

                # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫, –∏—â–µ–º –Ω–æ–≤—ã–µ
                if not app.bot_data.get('monitored_signals'):
                    # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è Live-–ª–æ–≥–æ–≤ ---
                    if app.bot_data.get('live_info_on', False):
                        rsi, stoch_k, stoch_d = calculate_indicators(ohlcv)
                        if rsi is not None:
                            info_msg = (
                                f"<b>[INFO]</b> | "
                                f"RSI: <code>{rsi:.2f}</code>, "
                                f"Stoch K/D: <code>{stoch_k:.2f}</code>/<code>{stoch_d:.2f}</code>"
                            )
                            await broadcast_func(app, info_msg)
                        else:
                            await broadcast_func(app, "<b>[INFO]</b> | –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
                    
                    await scan_for_new_opportunities(exchange, app, broadcast_func, ohlcv)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞, –º–æ–Ω–∏—Ç–æ—Ä–∏–º –µ–µ
                else:
                    await monitor_active_trades(exchange, app, broadcast_func)

                await asyncio.sleep(SCAN_INTERVAL)
            except Exception as e:
                log.critical(f"CRITICAL Error in loop iteration: {e}", exc_info=True)
                await broadcast_func(app, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(20) # –ü–∞—É–∑–∞ –≤ —Å–ª—É—á–∞–µ —Å–µ—Ä—å–µ–∑–Ω–æ–π –æ—à–∏–±–∫–∏
    except Exception as e:
        log.critical(f"CRITICAL STARTUP ERROR: {e}", exc_info=True)
        await broadcast_func(app, f"<b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê!</b>\n<code>–û—à–∏–±–∫–∞: {e}</code>")
    finally:
        if exchange:
            await exchange.close()
        log.info("Main Engine loop stopped.")
