# scanner_engine.py
# ============================================================================
# v39.2 - –î–û–ë–ê–í–õ–ï–ù –§–ò–õ–¨–¢–† EMA –ò –ù–û–í–´–ô –°–¢–û–ü-–õ–û–°–°
# - SL —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 0.5% –¥–ª—è –±–æ–ª—å—à–µ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —à—É–º—É.
# - –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä —Ç—Ä–µ–Ω–¥–∞: EMA 100.
#   - LONG: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ü–µ–Ω–∞ > EMA 100.
#   - SHORT: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ü–µ–Ω–∞ < EMA 100.
# - –û–±–Ω–æ–≤–ª–µ–Ω live-log –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ EMA.
# ============================================================================
import asyncio
import time
import logging
from datetime import datetime, timezone
import pandas as pd
import pandas_ta as ta

import ccxt.async_support as ccxt
from telegram.ext import Application

from trade_executor import log_trade_to_sheet, update_trade_in_sheet, log_debug_data
from state_utils import save_state

log = logging.getLogger("bot")

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞ ==================================================
PAIR_TO_SCAN = 'SOL/USDT'
TIMEFRAME = '1m'
SCAN_INTERVAL = 5

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---
RSI_PERIOD = 14
STOCH_K = 14
STOCH_D = 3
STOCH_SMOOTH = 3
EMA_PERIOD = 100  # <<< –ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–†: –ü–µ—Ä–∏–æ–¥ –¥–ª—è EMA —Ñ–∏–ª—å—Ç—Ä–∞

RSI_LONG_THRESHOLD = 35
RSI_SHORT_THRESHOLD = 75
STOCH_LONG_THRESHOLD = 20
STOCH_SHORT_THRESHOLD = 80

TP_PERCENT = 0.01      # 1%
SL_PERCENT = 0.005     # <<< –ò–ó–ú–ï–ù–ï–ù–û: 0.5%
INTERMEDIATE_PERCENT = 0.005  # 0.5% –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SL

# === –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ =====================================================
def calculate_indicators(ohlcv):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç RSI, Stochastic –∏ EMA –ø–æ –¥–∞–Ω–Ω—ã–º —Å–≤–µ—á–µ–π."""
    if not ohlcv or len(ohlcv) < EMA_PERIOD:
        return None, None, None, None
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df.ta.rsi(length=RSI_PERIOD, append=True)
    df.ta.stoch(k=STOCH_K, d=STOCH_D, smooth_k=STOCH_SMOOTH, append=True)
    df.ta.ema(length=EMA_PERIOD, append=True) # <<< –î–û–ë–ê–í–õ–ï–ù–û: –†–∞—Å—á–µ—Ç EMA
    last = df.iloc[-1]
    return (
        last[f'RSI_{RSI_PERIOD}'],
        last[f'STOCHk_{STOCH_K}_{STOCH_D}_{STOCH_SMOOTH}'],
        last[f'STOCHd_{STOCH_K}_{STOCH_D}_{STOCH_SMOOTH}'],
        last[f'EMA_{EMA_PERIOD}'] # <<< –î–û–ë–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º EMA
    )

# === –õ–æ–≥–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è =============================================
async def scan_for_new_opportunities(exchange, app: Application, broadcast_func, ohlcv):
    bot_data = app.bot_data
    side = ""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, –≤–∫–ª—é—á–∞—è EMA
        rsi, stoch_k, stoch_d, ema = calculate_indicators(ohlcv)
        if rsi is None:
            return

        trades = await exchange.fetch_trades(PAIR_TO_SCAN, limit=1, params={'type': 'swap'})
        if not trades: return
        entry_price = trades[0]['price']

        # --- –ù–û–í–´–ï –ü–†–ê–í–ò–õ–ê –í–•–û–î–ê –° –§–ò–õ–¨–¢–†–û–ú EMA ---
        long_signal_conditions = (
            rsi < RSI_LONG_THRESHOLD and
            stoch_k > stoch_d and
            stoch_k < STOCH_LONG_THRESHOLD
        )
        short_signal_conditions = (
            rsi > RSI_SHORT_THRESHOLD and
            stoch_k < stoch_d and
            stoch_k > STOCH_SHORT_THRESHOLD
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º LONG —Å–∏–≥–Ω–∞–ª + —Ñ–∏–ª—å—Ç—Ä —Ç—Ä–µ–Ω–¥–∞
        if long_signal_conditions and entry_price > ema:
            side = "LONG"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SHORT —Å–∏–≥–Ω–∞–ª + —Ñ–∏–ª—å—Ç—Ä —Ç—Ä–µ–Ω–¥–∞
        elif short_signal_conditions and entry_price < ema:
            side = "SHORT"
        else:
            # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
            return

        # --- –î–∞–ª—å–Ω–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
        sl_price = entry_price * (1 - SL_PERCENT) if side == "LONG" else entry_price * (1 + SL_PERCENT)
        tp_price = entry_price * (1 + TP_PERCENT) if side == "LONG" else entry_price * (1 - TP_PERCENT)
        intermediate_sl = entry_price * (1 + INTERMEDIATE_PERCENT) if side == "LONG" else entry_price * (1 - INTERMEDIATE_PERCENT)

        idea = f"RSI {rsi:.1f}, Stoch K/D {stoch_k:.1f}/{stoch_d:.1f}"
        decision = {
            "Signal_ID": f"signal_{int(time.time() * 1000)}",
            "Timestamp_UTC": datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S'),
            "Pair": PAIR_TO_SCAN, "Algorithm_Type": "RSI Stoch EMA 1m",
            "Strategy_Idea": idea, "Entry_Price": entry_price, "SL_Price": sl_price,
            "TP_Price": tp_price, "Intermediate_SL": intermediate_sl, "side": side,
            "Deposit": bot_data.get('deposit', 50), "Leverage": bot_data.get('leverage', 100),
            "RSI": rsi, "Stoch_K": stoch_k, "Stoch_D": stoch_d, "EMA": ema,
            "intermediate_triggered": False
        }
        msg = f"üî• <b>–í–•–û–î –í –°–î–ï–õ–ö–£ ({side})</b>\n\n<b>–¢–∏–ø:</b> <code>{idea} ({side})</code>\n<b>–í—Ö–æ–¥:</b> <code>{entry_price:.4f}</code> | <b>SL:</b> <code>{sl_price:.4f}</code> | <b>TP:</b> <code>{tp_price:.4f}</code>"
        await broadcast_func(app, msg)
        await log_trade_to_sheet(decision)
        bot_data['monitored_signals'].append(decision)
        save_state(app)

        if bot_data.get('debug_mode_on', False):
            await log_debug_data({
                "Timestamp_UTC": datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S'),
                "RSI": rsi, "Stoch_K": stoch_k, "Stoch_D": stoch_d, "EMA": ema,
                "Side": side, "Reason_Prop": "SIGNAL_FOUND"
            })

    except Exception as e:
        log.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–ö–ê–ù–ï–†–ê: {e}", exc_info=True)
        if not bot_data.get('live_info_on', False):
            await broadcast_func(app, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∫–∞–Ω–µ—Ä–µ: {e}")


# === –õ–æ–≥–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) =============================================
async def monitor_active_trades(exchange, app: Application, broadcast_func):
    bot_data = app.bot_data
    if not bot_data.get('monitored_signals'): return
    signal = bot_data['monitored_signals'][0]
    pair, entry_price, sl_price, tp_price, intermediate_sl, side = (signal['Pair'], signal['Entry_Price'], signal['SL_Price'], signal['TP_Price'], signal['Intermediate_SL'], signal['side'])
    intermediate_triggered = signal.get('intermediate_triggered', False)
    try:
        order_book = await exchange.fetch_order_book(pair, limit=1, params={'type': 'swap'})
        last_price = (order_book['bids'][0][0] + order_book['asks'][0][0]) / 2
        
        if bot_data.get('live_info_on', False):
             pnl_percent_raw = ((last_price - entry_price) / entry_price) * (-1 if side == 'SHORT' else 1)
             pnl_percent_display = pnl_percent_raw * 100 * signal['Leverage']
             info_msg = (
                 f"<b>[MONITOR]</b> | {side} {pair}\n"
                 f"–¶–µ–Ω–∞: <code>{last_price:.4f}</code> (–≤—Ö–æ–¥ {entry_price:.4f})\n"
                 f"PnL: <code>{pnl_percent_display:+.2f}%</code>"
             )
             await broadcast_func(app, info_msg)

        exit_status, exit_price, reason = None, None, None
        
        if not intermediate_triggered:
            if (side == 'LONG' and last_price >= intermediate_sl) or (side == 'SHORT' and last_price <= intermediate_sl):
                msg = f"üìà <b>–ë–µ–∑—É–±—ã—Ç–æ–∫ ({side})</b>\nSL –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {intermediate_sl:.4f}."
                await broadcast_func(app, msg)
                signal['intermediate_triggered'] = True
                signal['SL_Price'] = intermediate_sl
                sl_price = intermediate_sl
                save_state(app)
        
        if (side == 'LONG' and last_price >= tp_price) or (side == 'SHORT' and last_price <= tp_price):
            exit_status, exit_price, reason = "TP_HIT", tp_price, "Take Profit"
        elif (side == 'LONG' and last_price <= sl_price) or (side == 'SHORT' and last_price >= sl_price):
            exit_status, exit_price, reason = "SL_HIT", sl_price, "Stop Loss"
        
        if exit_status:
            pnl_percent_raw = ((exit_price - entry_price) / entry_price) * (-1 if side == 'SHORT' else 1)
            pnl_usd = signal['Deposit'] * signal['Leverage'] * pnl_percent_raw
            pnl_percent_display = pnl_percent_raw * 100 * signal['Leverage']
            await update_trade_in_sheet(signal, exit_status, exit_price, pnl_usd, pnl_percent_display, reason=reason)
            emoji = "‚úÖ" if pnl_usd >= 0 else "‚ùå"
            msg = (f"{emoji} <b>–°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê ({reason})</b>\n\n"
                   f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${pnl_usd:+.2f} ({pnl_percent_display:+.2f}%)</b>")
            await broadcast_func(app, msg)
            bot_data['monitored_signals'] = []
            save_state(app)
    except Exception as e:
        log.error(f"CRITICAL MONITORING ERROR: {e}", exc_info=True)
        await broadcast_func(app, f"‚ö†Ô∏è <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!</b>\n<code>–û—à–∏–±–∫–∞: {e}</code>")


# === –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª ============================================
async def scanner_main_loop(app: Application, broadcast_func):
    bot_version = getattr(app, 'bot_version', 'N/A')
    log.info(f"Main Engine loop starting (v{bot_version})...")
    exchange = None
    ohlcv = []
    last_ohlcv_update_time = 0

    try:
        exchange = ccxt.mexc({'options': {'defaultType': 'swap'}, 'enableRateLimit': True})
        await exchange.load_markets()
        log.info("Exchange connection and markets loaded.")

        while app.bot_data.get("bot_on", False):
            try:
                current_time = time.time()
                if current_time - last_ohlcv_update_time > 60:
                    ohlcv = await exchange.fetch_ohlcv(PAIR_TO_SCAN, timeframe=TIMEFRAME, limit=200, params={'type': 'swap'})
                    last_ohlcv_update_time = current_time
                    log.info("OHLCV data updated.")

                if not app.bot_data.get('monitored_signals'):
                    # --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–æ–≥–∏–∫–∞ –¥–ª—è Live-–ª–æ–≥–æ–≤ ---
                    if app.bot_data.get('live_info_on', False) and ohlcv:
                        rsi, stoch_k, stoch_d, ema = calculate_indicators(ohlcv)
                        if rsi is not None:
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å EMA
                            order_book = await exchange.fetch_order_book(PAIR_TO_SCAN, limit=1)
                            price = (order_book['bids'][0][0] + order_book['asks'][0][0]) / 2
                            
                            trend_status = "üîº –≤—ã—à–µ" if price > ema else "üîΩ –Ω–∏–∂–µ"
                            
                            info_msg = (
                                f"<b>[INFO]</b> | –¶–µ–Ω–∞: <code>{price:.2f}</code> ({trend_status} EMA <code>{ema:.2f}</code>)\n"
                                f"RSI: <code>{rsi:.2f}</code>, Stoch K/D: <code>{stoch_k:.2f}</code>/<code>{stoch_d:.2f}</code>"
                            )
                            await broadcast_func(app, info_msg)
                        else:
                            await broadcast_func(app, "<b>[INFO]</b> | –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
                    
                    await scan_for_new_opportunities(exchange, app, broadcast_func, ohlcv)
                else:
                    await monitor_active_trades(exchange, app, broadcast_func)

                await asyncio.sleep(SCAN_INTERVAL)
            except Exception as e:
                log.critical(f"CRITICAL Error in loop iteration: {e}", exc_info=True)
                await broadcast_func(app, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(20)
    except Exception as e:
        log.critical(f"CRITICAL STARTUP ERROR: {e}", exc_info=True)
        await broadcast_func(app, f"<b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê!</b>\n<code>–û—à–∏–±–∫–∞: {e}</code>")
    finally:
        if exchange:
            await exchange.close()
        log.info("Main Engine loop stopped.")
