# File: scanner_engine.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø V12)

import asyncio
import json
import pandas as pd
import pandas_ta as ta
import ccxt.async_support as ccxt
from data_feeder import last_data
from trade_executor import log_trade_to_sheet

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
LARGE_ORDER_USD = 50000 
TOP_N_ORDERS_TO_SEND = 10
MAX_PORTFOLIO_SIZE = 10
MIN_RR_RATIO = 1.5

# --- –ü–†–û–ú–ü–¢ –î–õ–Ø LLM ---
LLM_PROMPT_MICROSTRUCTURE = """
–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫-–∫–≤–∞–Ω—Ç –≤ HFT-—Ñ–æ–Ω–¥–µ, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä—ã–Ω–∫–∞ (Order Flow, Market Making).

**–¢–í–û–Ø –ó–ê–î–ê–ß–ê:**
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ JSON-–¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∏—Ä–∂–µ–≤–æ–≥–æ —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è –û–î–ù–û–ô –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã. –î–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—é—Ç —Ç–æ–ø-10 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –ª–∏–º–∏—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫ ("–ø–ª–∏—Ç").

1.  **–û—Ü–µ–Ω–∏ —Å–µ—Ç–∞–ø.** –ù–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω –Ω–∞–¥–µ–∂–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏?
2.  **–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –∞–ª–≥–æ—Ä–∏—Ç–º–∞,** –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç —ç—Ç–∏ –ø–ª–∏—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Market-Maker", "Absorption Algorithm").
3.  **–ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω,** –µ—Å–ª–∏ —Å–µ—Ç–∞–ø –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–¥–µ–∂–µ–Ω.

**–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:**
–í–µ—Ä–Ω–∏ JSON-–æ–±—ä–µ–∫—Ç.

{
  "pair": "BTC/USDT",
  "confidence_score": 9,
  "algorithm_type": "Classic Market-Maker",
  "strategy_idea": "Range Trading (Long)",
  "reason": "–û—á–µ–Ω—å –ø–ª–æ—Ç–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä –±–∏–¥–æ–≤ –≤—ã—Å—Ç—É–ø–∞–µ—Ç —Å–∏–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ê—Å–∫–∏ —Ä–∞–∑—Ä–µ–∂–µ–Ω—ã. –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Å–∫–æ–∫–∞.",
  "entry_price": 119200.0,
  "sl_price": 119050.0,
  "tp_price": 119425.0
}

–ï—Å–ª–∏ —Å–µ—Ç–∞–ø –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏, –≤–µ—Ä–Ω–∏: {"confidence_score": 0}
"""

exchange = ccxt.mexc({'options': {'defaultType': 'swap'}})

async def get_entry_atr(pair):
    try:
        ohlcv = await exchange.fetch_ohlcv(pair, '15m', limit=20)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df.ta.atr(length=14, append=True)
        atr_value = df.iloc[-1]['ATR_14']
        return atr_value if pd.notna(atr_value) else 0
    except Exception as e:
        print(f"Could not fetch ATR for {pair}: {e}")
        return 0

async def scanner_main_loop(app, ask_llm_func, broadcast_func, trade_log_ws, state):
    print("Scanner Engine loop started (v12_definitive_fix).")
    last_llm_call_time = 0

    while True:
        try:
            await asyncio.sleep(15)

            active_pairs = {s['pair'] for s in state.get('monitored_signals', [])}
            if len(active_pairs) >= MAX_PORTFOLIO_SIZE:
                print(f"Portfolio is full ({len(active_pairs)}). Scanner is sleeping.")
                await asyncio.sleep(30)
                continue

            market_anomalies = {}
            current_data_snapshot = dict(last_data)

            for symbol, data in current_data_snapshot.items():
                pair_name = symbol.split(':')[0]
                if not data or not data.get('bids') or not data.get('asks') or pair_name in active_pairs:
                    continue

                large_bids = []
                large_asks = []
                
                # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø, –ù–ê–î–ï–ñ–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–ê–ö–ê–ù–ê ---
                for order in data.get('bids', []):
                    if not (isinstance(order, (list, tuple)) and len(order) >= 2): continue
                    price, amount = order[0], order[1]
                    if price is None or amount is None: continue
                    order_value_usd = price * amount
                    if order_value_usd > LARGE_ORDER_USD:
                        large_bids.append({'price': price, 'value_usd': round(order_value_usd)})

                for order in data.get('asks', []):
                    if not (isinstance(order, (list, tuple)) and len(order) >= 2): continue
                    price, amount = order[0], order[1]
                    if price is None or amount is None: continue
                    order_value_usd = price * amount
                    if order_value_usd > LARGE_ORDER_USD:
                        large_asks.append({'price': price, 'value_usd': round(order_value_usd)})

                if large_bids or large_asks:
                    market_anomalies[pair_name] = {'bids': large_bids, 'asks': large_asks}

            current_time = asyncio.get_event_loop().time()
            if (current_time - last_llm_call_time) > 45 and market_anomalies:
                last_llm_call_time = current_time
                
                best_candidate_pair, max_order_value = None, 0
                for pair, anomalies in market_anomalies.items():
                    all_orders = anomalies['bids'] + anomalies['asks']
                    if not all_orders: continue
                    current_max = max(order['value_usd'] for order in all_orders)
                    if current_max > max_order_value:
                        max_order_value = current_max
                        best_candidate_pair = pair
                
                if not best_candidate_pair: continue

                best_candidate_data = market_anomalies[best_candidate_pair]
                top_bids = sorted(best_candidate_data['bids'], key=lambda x: x['value_usd'], reverse=True)[:TOP_N_ORDERS_TO_SEND]
                top_asks = sorted(best_candidate_data['asks'], key=lambda x: x['value_usd'], reverse=True)[:TOP_N_ORDERS_TO_SEND]
                
                focused_data = {best_candidate_pair: {'bids': top_bids, 'asks': top_asks}}
                prompt_data = json.dumps(focused_data, indent=2)

                full_prompt = LLM_PROMPT_MICROSTRUCTURE + "\n\n–ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú–´–ï –î–ê–ù–ù–´–ï:\n" + prompt_data
                await broadcast_func(app, f"üß† –°–∫–∞–Ω–µ—Ä –≤—ã–±—Ä–∞–ª –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ ({best_candidate_pair}). –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –∞–Ω–∞–ª–∏–∑ LLM...")
                
                llm_response_content = await ask_llm_func(full_prompt)
                
                if llm_response_content:
                    try:
                        cleaned_response = llm_response_content.strip().strip('```json').strip('```').strip()
                        decision = json.loads(cleaned_response)

                        if decision and decision.get("confidence_score", 0) >= 7:
                            entry, sl, tp = decision.get("entry_price"), decision.get("sl_price"), decision.get("tp_price")
                            if not all([entry, sl, tp]) or abs(entry - sl) == 0: continue
                            
                            rr_ratio = abs(tp - entry) / abs(entry - sl)
                            if rr_ratio < MIN_RR_RATIO:
                                await broadcast_func(app, f"‚ö†Ô∏è LLM –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–¥–µ–ª–∫—É –ø–æ {decision.get('pair')} —Å –Ω–∏–∑–∫–∏–º RR ({rr_ratio:.2f}:1). –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
                                continue
                            
                            pair_to_trade = decision.get("pair")
                            if pair_to_trade in active_pairs:
                                await broadcast_func(app, f"‚ö†Ô∏è LLM –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–¥–µ–ª–∫—É –ø–æ {pair_to_trade}, –Ω–æ –æ–Ω —É–∂–µ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
                                continue

                            msg = (f"<b>üî• LLM –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø (RR {rr_ratio:.2f}:1, –û—Ü–µ–Ω–∫–∞: {decision['confidence_score']}/10)</b>...")
                            await broadcast_func(app, msg)
                            
                            entry_atr = await get_entry_atr(pair_to_trade)
                            success = await log_trade_to_sheet(trade_log_ws, decision, entry_atr)
                            if success:
                                await broadcast_func(app, "‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞.")
                            else:
                                await broadcast_func(app, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–¥–µ–ª–∫—É.")
                        else:
                            await broadcast_func(app, "üßê LLM –Ω–µ –Ω–∞—à–µ–ª —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Å–µ—Ç–∞–ø–∞.")
                    except Exception as e:
                        print(f"Error parsing LLM decision: {e} | Response: {llm_response_content}")
                        await broadcast_func(app, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ LLM.")
                else:
                    await broadcast_func(app, "‚ö†Ô∏è LLM –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∑–∞–ø—Ä–æ—Å.")
        except asyncio.CancelledError:
            print("Scanner Engine loop cancelled.")
            break
        except Exception as e:
            print(f"Error in Scanner Engine loop: {e}")
            await asyncio.sleep(10)
