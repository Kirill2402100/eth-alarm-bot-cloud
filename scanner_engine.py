# File: scanner_engine.py (v25 - Smart Pre-filter)
# Changelog 17-Jul-2025 (Europe/Belgrade):
# ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω —É–º–Ω—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –æ—Ç—Å–µ–∏–≤–∞–Ω–∏—è —Å–ª–∞–±–æ–≥–æ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —à—É–º–∞.
# ‚Ä¢ –í–≤–µ–¥–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã MIN_TOTAL_LIQUIDITY_USD –∏ MIN_IMBALANCE_RATIO.
# ‚Ä¢ LLM —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö, –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ç–∞–ø–æ–≤.

import asyncio
import json
import time
import pandas as pd
import pandas_ta as ta
import ccxt.async_support as ccxt
from trade_executor import log_trade_to_sheet, update_trade_in_sheet

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –°–∫–∞–Ω–µ—Ä–∞ –∏ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ =====================================
PAIR_TO_SCAN = 'BTC/USDT'
TIMEFRAME = '15m'
LARGE_ORDER_USD = 500000
TOP_N_ORDERS_TO_ANALYZE = 15 # –°–∫–æ–ª—å–∫–æ —Ç–æ–ø-–∑–∞—è–≤–æ–∫ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

# --- –ù–û–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ì–û –§–ò–õ–¨–¢–†–ê ---
MIN_TOTAL_LIQUIDITY_USD = 2000000 # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º —Ç–æ–ø-N –ø–ª–∏—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
MIN_IMBALANCE_RATIO = 3.0         # –í–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –æ–¥–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∏–ª—å–Ω–µ–µ –¥—Ä—É–≥–æ–π

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---
MAX_PORTFOLIO_SIZE = 1
MIN_CONFIDENCE_SCORE = 7
MIN_RR_RATIO = 1.5
ENTRY_OFFSET_PERCENT = 0.0005
SL_OFFSET_PERCENT = 0.0010
LLM_COOLDOWN_SECONDS = 180

# ... (–ü—Ä–æ–º–ø—Ç –∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
LLM_PROMPT_MICROSTRUCTURE = """
–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫-–∫–≤–∞–Ω—Ç –≤ HFT-—Ñ–æ–Ω–¥–µ, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä—ã–Ω–∫–∞ BTC/USDT.

**–¢–í–û–Ø –ó–ê–î–ê–ß–ê:**
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ JSON-–¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø-15 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –ª–∏–º–∏—Ç–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö ("–ø–ª–∏—Ç–∞—Ö") –≤ –±–∏—Ä–∂–µ–≤–æ–º —Å—Ç–∞–∫–∞–Ω–µ. –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏.

1.  **–û—Ü–µ–Ω–∏ —Å–µ—Ç–∞–ø:** –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç –¥–∏—Å–±–∞–ª–∞–Ω—Å –Ω–∞–¥–µ–∂–Ω—ã–º –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏?
2.  **–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –∞–ª–≥–æ—Ä–∏—Ç–º–∞,** –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç —ç—Ç–æ—Ç –¥–∏—Å–±–∞–ª–∞–Ω—Å (Market-Maker, Absorption, Spoofing).
3.  **–û–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏:** –ù–∞–π–¥–∏ —Å–∞–º—ã–π –∑–Ω–∞—á–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è.
4.  **–û–±–æ—Å–Ω—É–π —Å–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ:** –í–°–ï–ì–î–ê –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ –ø–æ–ª–µ "reason".

**–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:**
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON-–æ–±—ä–µ–∫—Ç.

–ü—Ä–∏–º–µ—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Å–µ—Ç–∞–ø–∞:
{
  "confidence_score": 9,
  "algorithm_type": "Absorption",
  "reason": "–û—á–µ–Ω—å –ø–ª–æ—Ç–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä –±–∏–¥–æ–≤ –Ω–∞ ~119200 –≤—ã—Å—Ç—É–ø–∞–µ—Ç —Å–∏–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ê—Å–∫–∏ —Ä–∞–∑—Ä–µ–∂–µ–Ω—ã. –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Å–∫–æ–∫–∞ –æ—Ç —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è.",
  "key_support_level": 119200.0,
  "key_resistance_level": 119850.0
}

–ü—Ä–∏–º–µ—Ä –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Å–µ—Ç–∞–ø–∞:
{
  "confidence_score": 2,
  "algorithm_type": "Spoofing",
  "reason": "–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Å–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–µ—Å –±–∏–¥–æ–≤, –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ —Å–ø—É—Ñ–∏–Ω–≥. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫—Ä—É–ø–Ω—ã—Ö –∞—Å–∫–æ–≤ –¥–µ–ª–∞–µ—Ç —Å–µ—Ç–∞–ø –Ω–µ—É—Å—Ç–æ–π—á–∏–≤—ã–º.",
  "key_support_level": 119000.0,
  "key_resistance_level": 121000.0
}
"""
async def monitor_active_trades(exchange, app, broadcast_func, trade_log_ws, state, save_state_func):
    active_signals = state.get('monitored_signals')
    if not active_signals: return
    signal = active_signals[0]
    try:
        ticker = await exchange.fetch_ticker(signal['pair'])
        current_price = ticker.get('last')
        if not current_price: return
    except Exception as e:
        print(f"Monitor: Could not fetch ticker for {signal['pair']}. Error: {e}")
        return
    exit_status, exit_price = None, None
    entry_price, sl_price, tp_price = signal['entry_price'], signal['sl_price'], signal['tp_price']
    if signal['side'] == 'LONG':
        if current_price <= sl_price: exit_status, exit_price = "SL_HIT", sl_price
        elif current_price >= tp_price: exit_status, exit_price = "TP_HIT", tp_price
    elif signal['side'] == 'SHORT':
        if current_price >= sl_price: exit_status, exit_price = "SL_HIT", sl_price
        elif current_price <= tp_price: exit_status, exit_price = "TP_HIT", tp_price
    if exit_status:
        position_size_usd, leverage = 50, 100
        price_change_percent = ((exit_price - entry_price) / entry_price) if entry_price != 0 else 0
        if signal['side'] == 'SHORT': price_change_percent = -price_change_percent
        pnl_percent = price_change_percent * leverage * 100
        pnl_usd = position_size_usd * (pnl_percent / 100)
        await update_trade_in_sheet(trade_log_ws, signal, exit_status, exit_price, pnl_usd, pnl_percent)
        emoji = "‚úÖ" if pnl_usd > 0 else "‚ùå"
        msg = (f"{emoji} <b>–°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê ({exit_status})</b>\n\n"
               f"<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> <code>{signal['pair']}</code>\n"
               f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${pnl_usd:+.2f} ({pnl_percent:+.2f}%)</b>")
        await broadcast_func(app, msg)
        state['monitored_signals'] = []
        save_state_func()
        print(f"Trade {signal['signal_id']} closed. Portfolio is now empty.")

async def get_entry_atr(exchange, pair):
    try:
        ohlcv = await exchange.fetch_ohlcv(pair, TIMEFRAME, limit=20)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df.ta.atr(length=14, append=True)
        atr_value = df.iloc[-1]['ATR_14']
        return atr_value if pd.notna(atr_value) else 0
    except Exception: return 0

# === –ú–û–î–£–õ–¨ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø (—Å —É–º–Ω—ã–º –ø—Ä–µ-—Ñ–∏–ª—å—Ç—Ä–æ–º) =========================
async def scan_for_new_opportunities(exchange, app, ask_llm_func, broadcast_func, trade_log_ws, state, save_state_func):
    current_time = time.time()
    last_call_time = state.get('llm_cooldown', {}).get(PAIR_TO_SCAN, 0)
    if (current_time - last_call_time) < LLM_COOLDOWN_SECONDS:
        return

    try:
        order_book = await exchange.fetch_order_book(PAIR_TO_SCAN, limit=50) # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        large_bids = sorted([{'price': p, 'value_usd': round(p*a)} for p, a in order_book.get('bids', []) if p and a and (p*a > LARGE_ORDER_USD)], key=lambda x: x['value_usd'], reverse=True)
        large_asks = sorted([{'price': p, 'value_usd': round(p*a)} for p, a in order_book.get('asks', []) if p and a and (p*a > LARGE_ORDER_USD)], key=lambda x: x['value_usd'], reverse=True)
    except Exception as e:
        print(f"Could not fetch order book for {PAIR_TO_SCAN}: {e}")
        return

    # --- –ù–û–í–´–ô –ë–õ–û–ö: –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø ---
    top_bids = large_bids[:TOP_N_ORDERS_TO_ANALYZE]
    top_asks = large_asks[:TOP_N_ORDERS_TO_ANALYZE]
    
    total_bids_usd = sum(b['value_usd'] for b in top_bids)
    total_asks_usd = sum(a['value_usd'] for a in top_asks)

    if (total_bids_usd + total_asks_usd) < MIN_TOTAL_LIQUIDITY_USD:
        print(f"Pre-filter: Low liquidity (${total_bids_usd/1e6:.1f}M / ${total_asks_usd/1e6:.1f}M). Skipped.")
        return

    imbalance_ratio = 0
    if total_bids_usd > 0 and total_asks_usd > 0:
        imbalance_ratio = max(total_bids_usd / total_asks_usd, total_asks_usd / total_bids_usd)
    elif total_bids_usd > 0 or total_asks_usd > 0:
        imbalance_ratio = float('inf') # –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞ –ø—É—Å—Ç–∞, –¥–∏—Å–±–∞–ª–∞–Ω—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π

    if imbalance_ratio < MIN_IMBALANCE_RATIO:
        print(f"Pre-filter: Weak imbalance (ratio: {imbalance_ratio:.2f}, threshold: {MIN_IMBALANCE_RATIO:.2f}). Skipped.")
        return
    # --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò ---

    # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ —Å—é–¥–∞, –∞–Ω–æ–º–∞–ª–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑.
    state.setdefault('llm_cooldown', {})[PAIR_TO_SCAN] = time.time()
    save_state_func()

    focused_data = {PAIR_TO_SCAN: {'bids': top_bids, 'asks': top_asks}}
    prompt_data = json.dumps(focused_data, indent=2)
    full_prompt = LLM_PROMPT_MICROSTRUCTURE + "\n\n–ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú–´–ï –î–ê–ù–ù–´–ï:\n" + prompt_data

    await broadcast_func(app, f"üß† –°–∫–∞–Ω–µ—Ä –Ω–∞—à–µ–ª **–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∞–Ω–æ–º–∞–ª–∏—é** (–¥–∏—Å–±–∞–ª–∞–Ω—Å {imbalance_ratio:.1f}x). –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –∞–Ω–∞–ª–∏–∑ LLM...")
    llm_response_content = await ask_llm_func(full_prompt)

    if not llm_response_content: return

    try:
        # ... (–¥–∞–ª—å–Ω–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ LLM –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ) ...
        cleaned_response = llm_response_content.strip().strip('```json').strip('```').strip()
        decision = json.loads(cleaned_response)
        confidence = decision.get("confidence_score", 0)
        reason = decision.get("reason", "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")

        if confidence < MIN_CONFIDENCE_SCORE:
            msg = (f"üßê <b>–°–ò–ì–ù–ê–õ –û–¢–ö–õ–û–ù–ï–ù LLM (–û—Ü–µ–Ω–∫–∞: {confidence}/10)</b>\n\n"
                   f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> <i>\"{reason}\"</i>")
            await broadcast_func(app, msg)
            return

        support = decision.get("key_support_level")
        resistance = decision.get("key_resistance_level")
        if not all(isinstance(v, (int, float)) for v in [support, resistance]):
            await broadcast_func(app, f"‚ö†Ô∏è LLM –≤–µ—Ä–Ω—É–ª —É–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª, –Ω–æ –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            return

        ticker = await exchange.fetch_ticker(PAIR_TO_SCAN)
        current_price = ticker.get('last')
        if not current_price: return

        dist_to_support = abs(current_price - support)
        dist_to_resistance = abs(current_price - resistance)
        trade_plan = {}
        if dist_to_support < dist_to_resistance:
            trade_plan['side'] = "LONG"
            trade_plan['entry_price'] = support * (1 + ENTRY_OFFSET_PERCENT)
            trade_plan['sl_price'] = support * (1 - SL_OFFSET_PERCENT)
            risk = trade_plan['entry_price'] - trade_plan['sl_price']
            trade_plan['tp_price'] = trade_plan['entry_price'] + risk * MIN_RR_RATIO
            trade_plan['strategy_idea'] = "Long from Support"
        else:
            trade_plan['side'] = "SHORT"
            trade_plan['entry_price'] = resistance * (1 - ENTRY_OFFSET_PERCENT)
            trade_plan['sl_price'] = resistance * (1 + SL_OFFSET_PERCENT)
            risk = trade_plan['sl_price'] - trade_plan['entry_price']
            trade_plan['tp_price'] = trade_plan['entry_price'] - risk * MIN_RR_RATIO
            trade_plan['strategy_idea'] = "Short from Resistance"

        decision.update(trade_plan)
        decision['pair'] = PAIR_TO_SCAN
        msg = (f"<b>üî• –ù–û–í–´–ô –°–ò–ì–ù–ê–õ (–û—Ü–µ–Ω–∫–∞: {confidence}/10)</b>\n\n"
               f"<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> <code>{PAIR_TO_SCAN}</code>\n"
               f"<b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {decision['strategy_idea']}\n"
               f"<b>–ê–ª–≥–æ—Ä–∏—Ç–º –≤ —Å—Ç–∞–∫–∞–Ω–µ:</b> <i>{decision.get('algorithm_type', 'N/A')}</i>\n"
               f"<b>–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ø–ª–∞–Ω (RR ~{MIN_RR_RATIO:.1f}:1):</b>\n"
               f"  - –í—Ö–æ–¥: <code>{decision['entry_price']:.2f}</code>\n"
               f"  - SL: <code>{decision['sl_price']:.2f}</code>\n"
               f"  - TP: <code>{decision['tp_price']:.2f}</code>\n\n"
               f"<b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ LLM:</b> <i>\"{reason}\"</i>")
        await broadcast_func(app, msg)

        entry_atr = await get_entry_atr(exchange, PAIR_TO_SCAN)
        success = await log_trade_to_sheet(trade_log_ws, decision, entry_atr, state, save_state_func)
        if success:
            await broadcast_func(app, "‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≤–∑—è—Ç–∞ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.")

    except json.JSONDecodeError:
        print(f"Error parsing LLM JSON response. Raw response: {llm_response_content}")
        await broadcast_func(app, "‚ö†Ô∏è LLM –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON. –ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.")
    except Exception as e:
        print(f"Error processing new opportunity: {e}", exc_info=True)

# === –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ ========================================================
async def scanner_main_loop(app, ask_llm_func, broadcast_func, trade_log_ws, state, save_state_func):
    print("Main Engine loop started (v25_smart_pre-filter).")
    exchange = ccxt.mexc({'options': {'defaultType': 'swap'}})
    while state.get("bot_on", True):
        try:
            print(f"\n--- Running Main Cycle | Active Trades: {len(state.get('monitored_signals',[]))} ---")
            await monitor_active_trades(exchange, app, broadcast_func, trade_log_ws, state, save_state_func)
            if len(state.get('monitored_signals', [])) < MAX_PORTFOLIO_SIZE:
                await scan_for_new_opportunities(exchange, app, ask_llm_func, broadcast_func, trade_log_ws, state, save_state_func)
            print(f"--- Cycle Finished. Sleeping for 30 seconds. ---")
            await asyncio.sleep(30)
        except asyncio.CancelledError:
            print("Main Engine loop cancelled.")
            break
        except Exception as e:
            print(f"CRITICAL Error in Main Engine loop: {e}", exc_info=True)
            await asyncio.sleep(60)
    print("Main Engine loop stopped.")
    await exchange.close()
