# File: scanner_engine.py (v32 - Text-only LLM)
# Changelog 17-Jul-2025 (Europe/Belgrade):
# ‚Ä¢ –†–∞–¥–∏–∫–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–±–æ—Ç–µ —Å LLM –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
# ‚Ä¢ LLM —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑, –∞ –Ω–µ JSON.
# ‚Ä¢ Python-–∫–æ–¥ –ø–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏. –í—Å—è –ª–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ —Ç–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ ATR.
# ‚Ä¢ –£–¥–∞–ª–µ–Ω–∞ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –≤—Ö–æ–¥–∞.

import asyncio
import json
import re
import time
import pandas as pd
import pandas_ta as ta
import ccxt.async_support as ccxt
from trade_executor import log_trade_to_sheet, update_trade_in_sheet

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –°–∫–∞–Ω–µ—Ä–∞ –∏ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ =====================================
PAIR_TO_SCAN = 'BTC/USDT'
TIMEFRAME = '15m'
LARGE_ORDER_USD = 500000
TOP_N_ORDERS_TO_ANALYZE = 15
MIN_TOTAL_LIQUIDITY_USD = 2000000
MIN_IMBALANCE_RATIO = 3.0
MAX_PORTFOLIO_SIZE = 1
MIN_CONFIDENCE_SCORE = 6
MIN_RR_RATIO = 1.5
SL_ATR_MULTIPLIER = 2.0
LLM_COOLDOWN_SECONDS = 180
COUNTER_ORDER_RATIO = 1.25

# === –ü–†–û–ú–ü–¢ –î–õ–Ø LLM (v7 - Text-Only) =======================================
LLM_PROMPT_MICROSTRUCTURE = """
–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫-–∫–≤–∞–Ω—Ç –≤ HFT-—Ñ–æ–Ω–¥–µ —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º —Å—Ç–∏–ª–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞–∫–∞–Ω–∞ –∏ –¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ, —á–µ—Ç–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ.

**–¢–í–û–Ø –ó–ê–î–ê–ß–ê:**
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ JSON-–¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø-15 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –ª–∏–º–∏—Ç–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö ("–ø–ª–∏—Ç–∞—Ö").

**–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê:**
1.  **–§–æ—Ä–º–∞—Ç:** –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ –û–ë–´–ß–ù–û–ì–û –¢–ï–ö–°–¢–ê, –Ω–µ JSON.
2.  **–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–∫–ª—é—á–µ–Ω–∏–µ–º.
3.  **–û—Ü–µ–Ω–∫–∞:** –í –∫–æ–Ω—Ü–µ —Å–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏ —Å–≤–æ—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –≤–∏–¥–µ "–û—Ü–µ–Ω–∫–∞: X/10", –≥–¥–µ X ‚Äî —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.

**–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ (—Ç–æ—Ä–≥–æ–≤—ã–π —Å–µ—Ç–∞–ø):**
–ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∞—Å–∫–æ–≤ –≤–∏–¥–Ω–∞ –ø–ª–æ—Ç–Ω–∞—è —Å—Ç–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä–∞—è –æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É. –ë–∏–¥—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–ª–∞–±–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π. –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –≤–Ω–∏–∑ –æ—Ç —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è. –û—Ü–µ–Ω–∫–∞: 8/10

**–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ (–ù–ï —Ç–æ—Ä–≥–æ–≤—ã–π —Å–µ—Ç–∞–ø):**
–•–æ—Ç—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –µ—Å—Ç—å –ø–µ—Ä–µ–≤–µ—Å, –æ—Ä–¥–µ—Ä–∞ —Ä–∞–∑–º–∞–∑–∞–Ω—ã –ø–æ —Å—Ç–∞–∫–∞–Ω—É –∏ –Ω–µ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç —á–µ—Ç–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ü–æ—Ö–æ–∂–µ –Ω–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Å–ø—É—Ñ–∏–Ω–≥. –û—Ü–µ–Ω–∫–∞: 2/10
"""
async def monitor_active_trades(exchange, app, broadcast_func, trade_log_ws, state, save_state_func):
    active_signals = state.get('monitored_signals')
    if not active_signals: return
    signal = active_signals[0]
    try:
        ticker = await exchange.fetch_ticker(signal['pair'])
        current_price = ticker.get('last')
        if not current_price: return
        exit_status, exit_price = None, None
        trigger_order_usd = signal.get('trigger_order_usd', 0)
        if trigger_order_usd > 0:
            order_book = await exchange.fetch_order_book(signal['pair'], limit=25)
            if signal['side'] == 'LONG':
                counter_orders = [p * a for p, a in order_book.get('asks', []) if (p * a) > (trigger_order_usd * COUNTER_ORDER_RATIO)]
                if counter_orders:
                    exit_status, exit_price = "EMERGENCY_EXIT", current_price
            elif signal['side'] == 'SHORT':
                counter_orders = [p * a for p, a in order_book.get('bids', []) if (p * a) > (trigger_order_usd * COUNTER_ORDER_RATIO)]
                if counter_orders:
                    exit_status, exit_price = "EMERGENCY_EXIT", current_price
        if not exit_status:
            entry_price, sl_price, tp_price = signal['entry_price'], signal['sl_price'], signal['tp_price']
            if signal['side'] == 'LONG':
                if current_price <= sl_price: exit_status, exit_price = "SL_HIT", sl_price
                elif current_price >= tp_price: exit_status, exit_price = "TP_HIT", tp_price
            elif signal['side'] == 'SHORT':
                if current_price >= sl_price: exit_status, exit_price = "SL_HIT", sl_price
                elif current_price <= tp_price: exit_status, exit_price = "TP_HIT", tp_price
        if exit_status:
            entry_price = signal['entry_price']
            position_size_usd, leverage = 50, 100
            price_change_percent = ((exit_price - entry_price) / entry_price) if entry_price != 0 else 0
            if signal['side'] == 'SHORT': price_change_percent = -price_change_percent
            pnl_percent = price_change_percent * leverage * 100
            pnl_usd = position_size_usd * (pnl_percent / 100)
            await update_trade_in_sheet(trade_log_ws, signal, exit_status, exit_price, pnl_usd, pnl_percent)
            emoji = "‚ö†Ô∏è" if exit_status == "EMERGENCY_EXIT" else ("‚úÖ" if pnl_usd > 0 else "‚ùå")
            msg = (f"{emoji} <b>–°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê ({exit_status})</b>\n\n"
                   f"<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> <code>{signal['pair']}</code>\n"
                   f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${pnl_usd:+.2f} ({pnl_percent:+.2f}%)</b>")
            await broadcast_func(app, msg)
            state['monitored_signals'] = []
            save_state_func()
    except Exception as e:
        print(f"Monitor Error: {e}", exc_info=True)

async def get_entry_atr(exchange, pair):
    try:
        ohlcv = await exchange.fetch_ohlcv(pair, TIMEFRAME, limit=20)
        if not ohlcv or len(ohlcv) < 15:
            print(f"ATR Error: Not enough OHLCV data for {pair}. Got: {len(ohlcv) if ohlcv else 0}")
            return 0
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        for col in ['open', 'high', 'low', 'close', 'volume']:
            df[col] = pd.to_numeric(df[col])
        df.ta.atr(length=14, append=True)
        atr_value = df.iloc[-1]['ATR_14']
        if pd.isna(atr_value):
            print(f"ATR Error: ATR calculation resulted in NaN for {pair}.")
            return 0
        return atr_value
    except Exception as e:
        print(f"ATR Error: {e}", exc_info=True)
        return 0

async def scan_for_new_opportunities(exchange, app, ask_llm_func, broadcast_func, trade_log_ws, state, save_state_func):
    current_time = time.time()
    last_call_time = state.get('llm_cooldown', {}).get(PAIR_TO_SCAN, 0)
    if (current_time - last_call_time) < LLM_COOLDOWN_SECONDS:
        return

    try:
        order_book = await exchange.fetch_order_book(PAIR_TO_SCAN, limit=50)
        large_bids = sorted([{'price': p, 'value_usd': round(p*a)} for p, a in order_book.get('bids', []) if p and a and (p*a > LARGE_ORDER_USD)], key=lambda x: x['value_usd'], reverse=True)
        large_asks = sorted([{'price': p, 'value_usd': round(p*a)} for p, a in order_book.get('asks', []) if p and a and (p*a > LARGE_ORDER_USD)], key=lambda x: x['value_usd'], reverse=True)
    except Exception as e:
        print(f"Could not fetch order book for {PAIR_TO_SCAN}: {e}")
        return

    top_bids = large_bids[:TOP_N_ORDERS_TO_ANALYZE]
    top_asks = large_asks[:TOP_N_ORDERS_TO_ANALYZE]
    
    total_bids_usd = sum(b['value_usd'] for b in top_bids)
    total_asks_usd = sum(a['value_usd'] for a in top_asks)

    if (total_bids_usd + total_asks_usd) < MIN_TOTAL_LIQUIDITY_USD: return
    
    imbalance_ratio = 0
    dominant_side_is_bids = total_bids_usd > total_asks_usd
    if total_bids_usd > 0 and total_asks_usd > 0:
        imbalance_ratio = max(total_bids_usd / total_asks_usd, total_asks_usd / total_bids_usd)
    elif total_bids_usd > 0 or total_asks_usd > 0:
        imbalance_ratio = float('inf')

    if imbalance_ratio < MIN_IMBALANCE_RATIO: return

    state.setdefault('llm_cooldown', {})[PAIR_TO_SCAN] = time.time()
    save_state_func()

    dominant_side = "–ü–û–ö–£–ü–ê–¢–ï–õ–ï–ô" if dominant_side_is_bids else "–ü–†–û–î–ê–í–¶–û–í"
    largest_order = (top_bids[0] if top_bids else None) if dominant_side_is_bids else (top_asks[0] if top_asks else None)
    direction_text = "–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ –í–í–ï–†–•" if dominant_side_is_bids else "–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ –í–ù–ò–ó"

    if largest_order:
        detailed_msg = (f"üß† **–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è!**\n\n"
                        f"–°–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–µ—Å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ {dominant_side} (–¥–∏—Å–±–∞–ª–∞–Ω—Å {imbalance_ratio:.1f}x).\n"
                        f"–ö–ª—é—á–µ–≤–æ–π –æ—Ä–¥–µ—Ä: <code>${largest_order['value_usd']/1e6:.2f} –º–ª–Ω</code> –Ω–∞ —É—Ä–æ–≤–Ω–µ <code>{largest_order['price']}</code>.\n"
                        f"–û–∂–∏–¥–∞–Ω–∏–µ: {direction_text}.\n\n"
                        f"–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤ LLM...")
    else:
        detailed_msg = f"üß† –°–∫–∞–Ω–µ—Ä –Ω–∞—à–µ–ª **–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∞–Ω–æ–º–∞–ª–∏—é** (–¥–∏—Å–±–∞–ª–∞–Ω—Å {imbalance_ratio:.1f}x). –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –∞–Ω–∞–ª–∏–∑ LLM..."
    
    await broadcast_func(app, detailed_msg)

    focused_data = {PAIR_TO_SCAN: {'bids': top_bids, 'asks': top_asks}}
    prompt_data = json.dumps(focused_data, indent=2)
    # –í–ê–ñ–ù–û: –£–±–∏—Ä–∞–µ–º "response_format" –∏–∑ –≤—ã–∑–æ–≤–∞ LLM, —Ç.–∫. –∂–¥–µ–º —Ç–µ–∫—Å—Ç
    full_prompt = LLM_PROMPT_MICROSTRUCTURE + "\n\n–ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú–´–ï –î–ê–ù–ù–´–ï:\n" + prompt_data
    
    llm_response_text = await ask_llm(full_prompt) # ask_llm –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª JSON

    if not llm_response_text: return

    try:
        # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –≤–º–µ—Å—Ç–æ JSON ---
        llm_reason = llm_response_text
        confidence_match = re.search(r"–û—Ü–µ–Ω–∫–∞:\s*(\d+)/10", llm_response_text)
        
        if not confidence_match:
            await broadcast_func(app, f"‚ö†Ô∏è LLM –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –±–µ–∑ –æ—Ü–µ–Ω–∫–∏. –û—Ç–≤–µ—Ç: <i>{llm_reason}</i>")
            return
            
        confidence = int(confidence_match.group(1))

        if confidence < MIN_CONFIDENCE_SCORE:
            await broadcast_func(app, f"üßê <b>–°–ò–ì–ù–ê–õ –û–¢–ö–õ–û–ù–ï–ù LLM (–û—Ü–µ–Ω–∫–∞: {confidence}/10)</b>\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> <i>\"{llm_reason}\"</i>")
            return

        # --- –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –í—Ö–æ–¥ –≤—Å–µ–≥–¥–∞ –ø–æ ATR ---
        trade_plan = {}
        ticker = await exchange.fetch_ticker(PAIR_TO_SCAN)
        current_price = ticker.get('last')
        if not current_price: return
        
        trade_plan['strategy_idea'] = "Momentum Entry (ATR)"
        entry_atr = await get_entry_atr(exchange, PAIR_TO_SCAN)
        if entry_atr == 0:
            await broadcast_func(app, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å ATR –¥–ª—è Momentum-–≤—Ö–æ–¥–∞. –°–¥–µ–ª–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            return
        
        trade_plan['entry_price'] = current_price
        if dominant_side_is_bids:
            trade_plan['side'] = "LONG"
            trade_plan['sl_price'] = current_price - (entry_atr * SL_ATR_MULTIPLIER)
            trade_plan['tp_price'] = current_price + (entry_atr * SL_ATR_MULTIPLIER * MIN_RR_RATIO)
        else:
            trade_plan['side'] = "SHORT"
            trade_plan['sl_price'] = current_price + (entry_atr * SL_ATR_MULTIPLIER)
            trade_plan['tp_price'] = current_price - (entry_atr * SL_ATR_MULTIPLIER * MIN_RR_RATIO)

        decision = {
            "confidence_score": confidence,
            "reason": llm_reason,
            "algorithm_type": "Pressure", # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–∏–ø
        }
        decision.update(trade_plan)
        decision['pair'] = PAIR_TO_SCAN
        if largest_order:
            decision['trigger_order_usd'] = largest_order['value_usd']
        
        msg = (f"<b>üî• –ù–û–í–´–ô –°–ò–ì–ù–ê–õ (–û—Ü–µ–Ω–∫–∞: {confidence}/10)</b>\n\n"
               f"<b>–¢–∏–ø –≤—Ö–æ–¥–∞:</b> {decision['strategy_idea']}\n"
               f"<b>–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ø–ª–∞–Ω (RR ~{MIN_RR_RATIO:.1f}:1):</b>\n"
               f"  - –í—Ö–æ–¥: <code>{decision['entry_price']:.2f}</code>\n"
               f"  - SL: <code>{decision['sl_price']:.2f}</code>\n"
               f"  - TP: <code>{decision['tp_price']:.2f}</code>\n\n"
               f"<b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ LLM:</b> <i>\"{llm_reason}\"</i>")
        await broadcast_func(app, msg)

        success = await log_trade_to_sheet(trade_log_ws, decision, entry_atr, state, save_state_func)
        if success:
            await broadcast_func(app, "‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≤–∑—è—Ç–∞ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.")

    except Exception as e:
        print(f"Error processing new opportunity: {e}", exc_info=True)

async def scanner_main_loop(app, ask_llm_func, broadcast_func, trade_log_ws, state, save_state_func):
    print("Main Engine loop started (v32_text_only_llm).")
    exchange = ccxt.mexc({'options': {'defaultType': 'swap'}})
    while state.get("bot_on", True):
        try:
            await monitor_active_trades(exchange, app, broadcast_func, trade_log_ws, state, save_state_func)
            if len(state.get('monitored_signals', [])) < MAX_PORTFOLIO_SIZE:
                await scan_for_new_opportunities(exchange, app, ask_llm_func, broadcast_func, trade_log_ws, state, save_state_func)
            await asyncio.sleep(15)
        except asyncio.CancelledError:
            print("Main Engine loop cancelled.")
            break
        except Exception as e:
            print(f"CRITICAL Error in Main Engine loop: {e}", exc_info=True)
            await asyncio.sleep(60)
    print("Main Engine loop stopped.")
    await exchange.close()
